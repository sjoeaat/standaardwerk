EnhancedLogicParser.js:190 🔍 Detected condition on line 8: "+ Horde N31 ganz nach unten bringen (Umschwimmen Horde N21 nach N31 SCHRITT 18)" (markers: true, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 8: "Horde N31 ganz nach unten bringen (Umschwimmen Horde N21 nach N31 SCHRITT 18)" (OR: true, NOT: false)
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 9: "SCHRITT 1: Freigabe?"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "SCHRITT 1: Freigabe?" (length: 20)
EnhancedLogicParser.js:122 🎯 Character codes: Array(20)
EnhancedLogicParser.js:123 🎯 Step match result: Array(4)
EnhancedLogicParser.js:127 ✅ Successfully parsed step: SCHRITT 1 - Freigabe?
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 13: "SCHRITT 2: Bewegen oder auf Position?"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "SCHRITT 2: Bewegen oder auf Position?" (length: 37)
EnhancedLogicParser.js:122 🎯 Character codes: Array(37)
EnhancedLogicParser.js:123 🎯 Step match result: Array(4)
EnhancedLogicParser.js:127 ✅ Successfully parsed step: SCHRITT 2 - Bewegen oder auf Position?
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:190 🔍 Detected condition on line 14: "NICHT Auf Sollwert Position" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 14: "Auf Sollwert Position" (OR: false, NOT: true)
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 16: "SCHRITT 3: Signalisierung Horde geht bewegen"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "SCHRITT 3: Signalisierung Horde geht bewegen" (length: 44)
EnhancedLogicParser.js:122 🎯 Character codes: Array(44)
EnhancedLogicParser.js:123 🎯 Step match result: Array(4)
EnhancedLogicParser.js:127 ✅ Successfully parsed step: SCHRITT 3 - Signalisierung Horde geht bewegen
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 18: "SCHRITT 4: Horde heben"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "SCHRITT 4: Horde heben" (length: 22)
EnhancedLogicParser.js:122 🎯 Character codes: Array(22)
EnhancedLogicParser.js:123 🎯 Step match result: Array(4)
EnhancedLogicParser.js:127 ✅ Successfully parsed step: SCHRITT 4 - Horde heben
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:190 🔍 Detected condition on line 19: "Istwert Position [mm] &gt; = Sollwert Position [mm] - Marge [mm]" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 19: "Istwert Position [mm] &gt; = Sollwert Position [mm] - Marge [mm]" (OR: false, NOT: false)
EnhancedLogicParser.js:214 📝 Found variable assignment: "Istwert Position [mm] &gt; = Sollwert Position [mm] - Marge [mm]"
EnhancedLogicParser.js:190 🔍 Detected condition on line 20: "Horde während Aufstellen oder Warten nicht aus Ausfuhrtabelle entfernt: Sollwert Position N31 &lt;&gt; 21 (unterste Position)" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 20: "Horde während Aufstellen oder Warten nicht aus Ausfuhrtabelle entfernt: Sollwert Position N31 &lt;&gt; 21 (unterste Position)" (OR: false, NOT: false)
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 21: "SCHRITT 5: Stopp/Kontrolle Position"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "SCHRITT 5: Stopp/Kontrolle Position" (length: 35)
EnhancedLogicParser.js:122 🎯 Character codes: Array(35)
EnhancedLogicParser.js:123 🎯 Step match result: Array(4)
EnhancedLogicParser.js:127 ✅ Successfully parsed step: SCHRITT 5 - Stopp/Kontrolle Position
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:190 🔍 Detected condition on line 22: "NICHT Hydraulikpumpe MP131 dreht" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 22: "Hydraulikpumpe MP131 dreht" (OR: false, NOT: true)
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 24: "SCHRITT 6: Fertig"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "SCHRITT 6: Fertig" (length: 17)
EnhancedLogicParser.js:122 🎯 Character codes: Array(17)
EnhancedLogicParser.js:123 🎯 Step match result: Array(4)
EnhancedLogicParser.js:127 ✅ Successfully parsed step: SCHRITT 6 - Fertig
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 26: "SCHRITT 2: NICHT Auf Sollwert Position"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "SCHRITT 2: NICHT Auf Sollwert Position" (length: 38)
EnhancedLogicParser.js:122 🎯 Character codes: Array(38)
EnhancedLogicParser.js:123 🎯 Step match result: Array(4)
EnhancedLogicParser.js:127 ✅ Successfully parsed step: SCHRITT 2 - NICHT Auf Sollwert Position
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 28: "SCHRITT 7: Signalisierung Horde geht bewegen"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "SCHRITT 7: Signalisierung Horde geht bewegen" (length: 44)
EnhancedLogicParser.js:122 🎯 Character codes: Array(44)
EnhancedLogicParser.js:123 🎯 Step match result: Array(4)
EnhancedLogicParser.js:127 ✅ Successfully parsed step: SCHRITT 7 - Signalisierung Horde geht bewegen
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 30: "SCHRITT 8: Horde senken"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "SCHRITT 8: Horde senken" (length: 23)
EnhancedLogicParser.js:122 🎯 Character codes: Array(23)
EnhancedLogicParser.js:123 🎯 Step match result: Array(4)
EnhancedLogicParser.js:127 ✅ Successfully parsed step: SCHRITT 8 - Horde senken
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:190 🔍 Detected condition on line 31: "Istwert Position [mm] &lt; = Sollwert Position [mm] + Marge [mm]" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 31: "Istwert Position [mm] &lt; = Sollwert Position [mm] + Marge [mm]" (OR: false, NOT: false)
EnhancedLogicParser.js:214 📝 Found variable assignment: "Istwert Position [mm] &lt; = Sollwert Position [mm] + Marge [mm]"
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 32: "SCHRITT 9: Stopp/Kontrolle Position"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "SCHRITT 9: Stopp/Kontrolle Position" (length: 35)
EnhancedLogicParser.js:122 🎯 Character codes: Array(35)
EnhancedLogicParser.js:123 🎯 Step match result: Array(4)
EnhancedLogicParser.js:127 ✅ Successfully parsed step: SCHRITT 9 - Stopp/Kontrolle Position
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:190 🔍 Detected condition on line 33: "NICHT Hebevorrichtung Horde N31 hinunten (NICHT N31-100-L)" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 33: "Hebevorrichtung Horde N31 hinunten (NICHT N31-100-L)" (OR: false, NOT: true)
EnhancedLogicParser.js:190 🔍 Detected condition on line 35: "+ von" (markers: true, indented: false, implicit: false)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 35: "von" (OR: true, NOT: false)
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 36: "SCHRITT 2: Auf Sollwert Position"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "SCHRITT 2: Auf Sollwert Position" (length: 32)
EnhancedLogicParser.js:122 🎯 Character codes: Array(32)
EnhancedLogicParser.js:123 🎯 Step match result: Array(4)
EnhancedLogicParser.js:127 ✅ Successfully parsed step: SCHRITT 2 - Auf Sollwert Position
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 37: "SCHRITT 10: Fertig"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "SCHRITT 10: Fertig" (length: 18)
EnhancedLogicParser.js:122 🎯 Character codes: Array(18)0: 831: 672: 723: 824: 735: 846: 847: 328: 499: 4810: 5811: 3212: 7013: 10114: 11415: 11616: 10517: 103length: 18[[Prototype]]: Array(0)
EnhancedLogicParser.js:123 🎯 Step match result: Array(4)
EnhancedLogicParser.js:127 ✅ Successfully parsed step: SCHRITT 10 - Fertig
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 39: "SCHRITT 4: Horde während Aufstellen oder Warten aus Ausfuhrtabelle entfernt: Sollwert Position N31 = 21 (unterste Position)"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "SCHRITT 4: Horde während Aufstellen oder Warten aus Ausfuhrtabelle entfernt: Sollwert Position N31 = 21 (unterste Position)" (length: 123)
EnhancedLogicParser.js:122 🎯 Character codes: Array(123)
EnhancedLogicParser.js:123 🎯 Step match result: Array(4)
EnhancedLogicParser.js:127 ✅ Successfully parsed step: SCHRITT 4 - Horde während Aufstellen oder Warten aus Ausfuhrtabelle entfernt: Sollwert Position N31 = 21 (unterste Position)
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 40: "SCHRITT 11: Stopp/Kontrolle Position"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "SCHRITT 11: Stopp/Kontrolle Position" (length: 36)
EnhancedLogicParser.js:122 🎯 Character codes: Array(36)
EnhancedLogicParser.js:123 🎯 Step match result: Array(4)
EnhancedLogicParser.js:127 ✅ Successfully parsed step: SCHRITT 11 - Stopp/Kontrolle Position
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:190 🔍 Detected condition on line 41: "NICHT Hydraulikpumpe MP131 dreht" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 41: "Hydraulikpumpe MP131 dreht" (OR: false, NOT: true)
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 42: "SCHRITT 12: Fertig"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "SCHRITT 12: Fertig" (length: 18)
EnhancedLogicParser.js:122 🎯 Character codes: Array(18)
EnhancedLogicParser.js:123 🎯 Step match result: Array(4)
EnhancedLogicParser.js:127 ✅ Successfully parsed step: SCHRITT 12 - Fertig
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:190 🔍 Detected condition on line 46: "Pos. 3 Horde auf Etage 3: Pos. 19 Horde auf Etage 19" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 46: "Pos. 3 Horde auf Etage 3: Pos. 19 Horde auf Etage 19" (OR: false, NOT: false)
EnhancedLogicParser.js:190 🔍 Detected condition on line 51: "Sollwert OK = Sollwert Position &gt; = 1" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 51: "Sollwert OK = Sollwert Position &gt; = 1" (OR: false, NOT: false)
EnhancedLogicParser.js:214 📝 Found variable assignment: "Sollwert OK = Sollwert Position &gt; = 1"
EnhancedLogicParser.js:190 🔍 Detected condition on line 52: "Sollwert Position &lt; = 21" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 52: "Sollwert Position &lt; = 21" (OR: false, NOT: false)
EnhancedLogicParser.js:214 📝 Found variable assignment: "Sollwert Position &lt; = 21"
EnhancedLogicParser.js:190 🔍 Detected condition on line 53: "Stopp automatische Bewegung Horde = Störung Laser (N31-900-GTP): Synchronfehler" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 53: "Stopp automatische Bewegung Horde = Störung Laser (N31-900-GTP): Synchronfehler" (OR: false, NOT: false)
EnhancedLogicParser.js:214 📝 Found variable assignment: "Stopp automatische Bewegung Horde = Störung Laser (N31-900-GTP): Synchronfehler"
EnhancedLogicParser.js:190 🔍 Detected condition on line 54: "+ Störung Laser (N31-900-GTP): Zu große Änderung Wert" (markers: true, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 54: "Störung Laser (N31-900-GTP): Zu große Änderung Wert" (OR: true, NOT: false)
EnhancedLogicParser.js:190 🔍 Detected condition on line 55: "+ Störung Laser (N31-900-GTP): Vorbei erwünschte Position" (markers: true, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 55: "Störung Laser (N31-900-GTP): Vorbei erwünschte Position" (OR: true, NOT: false)
EnhancedLogicParser.js:190 🔍 Detected condition on line 56: "+ Störung: Gefüllte Etage N31 ganz oben Salzlake" (markers: true, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 56: "Störung: Gefüllte Etage N31 ganz oben Salzlake" (OR: true, NOT: false)
EnhancedLogicParser.js:190 🔍 Detected condition on line 57: "+ Horde N21 Heben/Senken Störung: Niveau in Hydraulikbehälter für Horde N31/N21 zu niedrig" (markers: true, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 57: "Horde N21 Heben/Senken Störung: Niveau in Hydraulikbehälter für Horde N31/N21 zu niedrig" (OR: true, NOT: false)
EnhancedLogicParser.js:190 🔍 Detected condition on line 58: "Stopp Bewegung Horde nach oben = Störung: Gefüllte Etage Horde N31 ganz oben Salzlake" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 58: "Stopp Bewegung Horde nach oben = Störung: Gefüllte Etage Horde N31 ganz oben Salzlake" (OR: false, NOT: false)
EnhancedLogicParser.js:214 📝 Found variable assignment: "Stopp Bewegung Horde nach oben = Störung: Gefüllte Etage Horde N31 ganz oben Salzlake"
EnhancedLogicParser.js:190 🔍 Detected condition on line 59: "+ Horde N21 Heben/Senken Störung: Niveau in Hydraulikbehälter für Horde N31/N31 zu niedrig" (markers: true, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 59: "Horde N21 Heben/Senken Störung: Niveau in Hydraulikbehälter für Horde N31/N31 zu niedrig" (OR: true, NOT: false)
EnhancedLogicParser.js:190 🔍 Detected condition on line 60: "Stopp Horde nach unten bei Umschwimmen = SETZEN" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 60: "Stopp Horde nach unten bei Umschwimmen = SETZEN" (OR: false, NOT: false)
EnhancedLogicParser.js:214 📝 Found variable assignment: "Stopp Horde nach unten bei Umschwimmen = SETZEN"
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 62: "SCHRITT 5: +19"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "SCHRITT 5: +19" (length: 14)
EnhancedLogicParser.js:122 🎯 Character codes: Array(14)
EnhancedLogicParser.js:123 🎯 Step match result: Array(4)
EnhancedLogicParser.js:127 ✅ Successfully parsed step: SCHRITT 5 - +19
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 63: "SCHRITT 8: Hebevorrichtung Horde N31 hinunten (N31-100-L)"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "SCHRITT 8: Hebevorrichtung Horde N31 hinunten (N31-100-L)" (length: 57)
EnhancedLogicParser.js:122 🎯 Character codes: Array(57)
EnhancedLogicParser.js:123 🎯 Step match result: Array(4)
EnhancedLogicParser.js:127 ✅ Successfully parsed step: SCHRITT 8 - Hebevorrichtung Horde N31 hinunten (N31-100-L)
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:190 🔍 Detected condition on line 68: "Variable 1 (Erwünschte Position Horde N31) = = = Horden Ausfuhrtabelle. Reihe[1].Von Etage" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 68: "Variable 1 (Erwünschte Position Horde N31) = = = Horden Ausfuhrtabelle. Reihe[1].Von Etage" (OR: false, NOT: false)
EnhancedLogicParser.js:214 📝 Found variable assignment: "Variable 1 (Erwünschte Position Horde N31) = = = Horden Ausfuhrtabelle. Reihe[1].Von Etage"
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 69: "Start Horde aufstellen für Entleeren (Entleeren Horde N31 SCHRITT 2&amp;3) = 2T30: Entleeren Horde Reihe für Reihe: Erwünschte Etage"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "Start Horde aufstellen für Entleeren (Entleeren Horde N31 SCHRITT 2&amp;3) = 2T30: Entleeren Horde Reihe für Reihe: Erwünschte Etage" (length: 132)
EnhancedLogicParser.js:122 🎯 Character codes: Array(132)
EnhancedLogicParser.js:123 🎯 Step match result: null
EnhancedLogicParser.js:190 🔍 Detected condition on line 69: "Start Horde aufstellen für Entleeren (Entleeren Horde N31 SCHRITT 2&amp;3) = 2T30: Entleeren Horde Reihe für Reihe: Erwünschte Etage" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 69: "Start Horde aufstellen für Entleeren (Entleeren Horde N31 SCHRITT 2&amp;3) = 2T30: Entleeren Horde Reihe für Reihe: Erwünschte Etage" (OR: false, NOT: false)
EnhancedLogicParser.js:214 📝 Found variable assignment: "Start Horde aufstellen für Entleeren (Entleeren Horde N31 SCHRITT 2&amp;3) = 2T30: Entleeren Horde Reihe für Reihe: Erwünschte Etage"
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 70: "Horde wird entleert (Entleeren Horde N31 SCHRITT 7+8)"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "Horde wird entleert (Entleeren Horde N31 SCHRITT 7+8)" (length: 53)
EnhancedLogicParser.js:122 🎯 Character codes: Array(53)
EnhancedLogicParser.js:123 🎯 Step match result: null
EnhancedLogicParser.js:190 🔍 Detected condition on line 70: "Horde wird entleert (Entleeren Horde N31 SCHRITT 7+8)" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 70: "Horde wird entleert (Entleeren Horde N31 SCHRITT 7+8)" (OR: false, NOT: false)
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 71: "Positionieren Horde (2T30: Entleeren Horde Reihe für Reihe SCHRITT 1&amp;2)"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "Positionieren Horde (2T30: Entleeren Horde Reihe für Reihe SCHRITT 1&amp;2)" (length: 75)
EnhancedLogicParser.js:122 🎯 Character codes: Array(75)
EnhancedLogicParser.js:123 🎯 Step match result: null
EnhancedLogicParser.js:190 🔍 Detected condition on line 71: "Positionieren Horde (2T30: Entleeren Horde Reihe für Reihe SCHRITT 1&amp;2)" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 71: "Positionieren Horde (2T30: Entleeren Horde Reihe für Reihe SCHRITT 1&amp;2)" (OR: false, NOT: false)
EnhancedLogicParser.js:190 🔍 Detected condition on line 72: "N21: Umschwimmen Horde nach N31: Erwünschte Etage" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 72: "N21: Umschwimmen Horde nach N31: Erwünschte Etage" (OR: false, NOT: false)
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 73: "Bestimmen Etage Umschwimmen (N21: Umschwimmen Horde nach N31 SCHRITT 2&amp;3) = 21 (Unterste Position)"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "Bestimmen Etage Umschwimmen (N21: Umschwimmen Horde nach N31 SCHRITT 2&amp;3) = 21 (Unterste Position)" (length: 102)
EnhancedLogicParser.js:122 🎯 Character codes: Array(102)
EnhancedLogicParser.js:123 🎯 Step match result: null
EnhancedLogicParser.js:190 🔍 Detected condition on line 73: "Bestimmen Etage Umschwimmen (N21: Umschwimmen Horde nach N31 SCHRITT 2&amp;3) = 21 (Unterste Position)" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 73: "Bestimmen Etage Umschwimmen (N21: Umschwimmen Horde nach N31 SCHRITT 2&amp;3) = 21 (Unterste Position)" (OR: false, NOT: false)
EnhancedLogicParser.js:214 📝 Found variable assignment: "Bestimmen Etage Umschwimmen (N21: Umschwimmen Horde nach N31 SCHRITT 2&amp;3) = 21 (Unterste Position)"
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 74: "Start Horde nach unterste Position (Entleeren Horde N31 SCHRITT 12)"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "Start Horde nach unterste Position (Entleeren Horde N31 SCHRITT 12)" (length: 67)
EnhancedLogicParser.js:122 🎯 Character codes: Array(67)
EnhancedLogicParser.js:123 🎯 Step match result: null
EnhancedLogicParser.js:190 🔍 Detected condition on line 74: "Start Horde nach unterste Position (Entleeren Horde N31 SCHRITT 12)" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 74: "Start Horde nach unterste Position (Entleeren Horde N31 SCHRITT 12)" (OR: false, NOT: false)
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 75: "+ Horde nach unterste Position (Umschwimmen Horde N21 nach N31 SCHRITT 18)"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "+ Horde nach unterste Position (Umschwimmen Horde N21 nach N31 SCHRITT 18)" (length: 74)
EnhancedLogicParser.js:122 🎯 Character codes: Array(74)
EnhancedLogicParser.js:123 🎯 Step match result: null
EnhancedLogicParser.js:190 🔍 Detected condition on line 75: "+ Horde nach unterste Position (Umschwimmen Horde N21 nach N31 SCHRITT 18)" (markers: true, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 75: "Horde nach unterste Position (Umschwimmen Horde N21 nach N31 SCHRITT 18)" (OR: true, NOT: false)
EnhancedLogicParser.js:190 🔍 Detected condition on line 76: "Variable 2 (Sollwert Position [1..21]) = = = Erwünschte Position Horde N31" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 76: "Variable 2 (Sollwert Position [1..21]) = = = Erwünschte Position Horde N31" (OR: false, NOT: false)
EnhancedLogicParser.js:214 📝 Found variable assignment: "Variable 2 (Sollwert Position [1..21]) = = = Erwünschte Position Horde N31"
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 77: "Start Positionieren (RUHE&amp;SCHRITT 1)"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "Start Positionieren (RUHE&amp;SCHRITT 1)" (length: 40)
EnhancedLogicParser.js:122 🎯 Character codes: Array(40)
EnhancedLogicParser.js:123 🎯 Step match result: null
EnhancedLogicParser.js:190 🔍 Detected condition on line 77: "Start Positionieren (RUHE&amp;SCHRITT 1)" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 77: "Start Positionieren (RUHE&amp;SCHRITT 1)" (OR: false, NOT: false)
EnhancedLogicParser.js:190 🔍 Detected condition on line 78: "Störung: Gefüllte Etage Horde N31 ganz oben Salzlake = SETZEN" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 78: "Störung: Gefüllte Etage Horde N31 ganz oben Salzlake = SETZEN" (OR: false, NOT: false)
EnhancedLogicParser.js:214 📝 Found variable assignment: "Störung: Gefüllte Etage Horde N31 ganz oben Salzlake = SETZEN"
EnhancedLogicParser.js:190 🔍 Detected condition on line 82: "NICHT SETZEN-Bedingung" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 82: "SETZEN-Bedingung" (OR: false, NOT: true)
enhancedWordParser.js:137 📊 Parse result for Horde N31 Heben/Senken: Object
UnifiedTextParser.js:56 🔧 Starting normalization for source: word
UnifiedTextParser.js:57 📝 Original text (first 300 chars): Symbolik IDB: N31_HebenSenken
RUHE: Horde N31 Heben/Senken
Start Horde aufstellen für Entleeren (Entleeren Horde N31 SCHRITT 3)
+
Horde nach oben während Produktion (Entleeren Horde N31: Entleeren Horde gestartet)
Start Positionieren Horde (T40: Entleeren Horde Reihe für Reihe SCHRITT 5)
+
Start Hor
UnifiedTextParser.js:76 ✅ Normalized text (first 300 chars): Symbolik IDB: N31_HebenSenken
RUHE: Horde N31 Heben/Senken
Start Horde aufstellen für Entleeren (Entleeren Horde N31 SCHRITT 3)
+ Horde nach oben während Produktion (Entleeren Horde N31: Entleeren Horde gestartet)
Start Positionieren Horde (T40: Entleeren Horde Reihe für Reihe SCHRITT 5)
+ Start Hor
enhancedWordParser.js:181 ✅ Stappen gevonden voor Horde N31 Heben/Senken:
enhancedWordParser.js:183   - RUST 0: Horde N31 Heben/Senken
enhancedWordParser.js:183   - SCHRITT 1: Freigabe?
enhancedWordParser.js:183   - SCHRITT 2: Bewegen oder auf Position?
enhancedWordParser.js:183   - SCHRITT 3: Signalisierung Horde geht bewegen
enhancedWordParser.js:183   - SCHRITT 4: Horde heben
enhancedWordParser.js:183   - SCHRITT 5: Stopp/Kontrolle Position
enhancedWordParser.js:183   - SCHRITT 6: Fertig
enhancedWordParser.js:183   - SCHRITT 2: NICHT Auf Sollwert Position
enhancedWordParser.js:183   - SCHRITT 7: Signalisierung Horde geht bewegen
enhancedWordParser.js:183   - SCHRITT 8: Horde senken
enhancedWordParser.js:183   - SCHRITT 9: Stopp/Kontrolle Position
enhancedWordParser.js:183   - SCHRITT 2: Auf Sollwert Position
enhancedWordParser.js:183   - SCHRITT 10: Fertig
enhancedWordParser.js:183   - SCHRITT 4: Horde während Aufstellen oder Warten aus Ausfuhrtabelle entfernt: Sollwert Position N31 = 21 (unterste Position)
enhancedWordParser.js:183   - SCHRITT 11: Stopp/Kontrolle Position
enhancedWordParser.js:183   - SCHRITT 12: Fertig
enhancedWordParser.js:183   - SCHRITT 5: +19
enhancedWordParser.js:183   - SCHRITT 8: Hebevorrichtung Horde N31 hinunten (N31-100-L)
enhancedWordParser.js:283 📌 Found program: Horde N32 Heben/Senken FB452
enhancedWordParser.js:295 📁 Created program with path: [AusfuhrHorden N31-N34 → Maschineteile → Horde N31 Heben/Senken] for "Horde N32 Heben/Senken"
enhancedWordParser.js:328 🗂️ Updated path level 2: "Horde N32 Heben/Senken" → [AusfuhrHorden N31-N34 → Maschineteile → Horde N32 Heben/Senken]
enhancedWordParser.js:314   ↳ IDB naam: N32_HebenSenken
enhancedWordParser.js:120 💾 Saving program: Horde N32 Heben/Senken
UnifiedTextParser.js:56 🔧 Starting normalization for source: word
UnifiedTextParser.js:57 📝 Original text (first 300 chars): Symbolik IDB: N32_HebenSenken
Siehe: Horde N31 Heben/Senken
UnifiedTextParser.js:76 ✅ Normalized text (first 300 chars): Symbolik IDB: N32_HebenSenken
Siehe: Horde N31 Heben/Senken
enhancedWordParser.js:137 📊 Parse result for Horde N32 Heben/Senken: Object
UnifiedTextParser.js:56 🔧 Starting normalization for source: word
UnifiedTextParser.js:57 📝 Original text (first 300 chars): Symbolik IDB: N32_HebenSenken
Siehe: Horde N31 Heben/Senken
UnifiedTextParser.js:76 ✅ Normalized text (first 300 chars): Symbolik IDB: N32_HebenSenken
Siehe: Horde N31 Heben/Senken
enhancedWordParser.js:283 📌 Found program: Horde N33 Heben/Senken FB454
enhancedWordParser.js:295 📁 Created program with path: [AusfuhrHorden N31-N34 → Maschineteile → Horde N32 Heben/Senken] for "Horde N33 Heben/Senken"
enhancedWordParser.js:328 🗂️ Updated path level 2: "Horde N33 Heben/Senken" → [AusfuhrHorden N31-N34 → Maschineteile → Horde N33 Heben/Senken]
enhancedWordParser.js:314   ↳ IDB naam: N33_HebenSenken
enhancedWordParser.js:120 💾 Saving program: Horde N33 Heben/Senken
UnifiedTextParser.js:56 🔧 Starting normalization for source: word
UnifiedTextParser.js:57 📝 Original text (first 300 chars): Symbolik IDB: N33_HebenSenken
Siehe: Horde N31 Heben/Senken
UnifiedTextParser.js:76 ✅ Normalized text (first 300 chars): Symbolik IDB: N33_HebenSenken
Siehe: Horde N31 Heben/Senken
enhancedWordParser.js:137 📊 Parse result for Horde N33 Heben/Senken: Object
UnifiedTextParser.js:56 🔧 Starting normalization for source: word
UnifiedTextParser.js:57 📝 Original text (first 300 chars): Symbolik IDB: N33_HebenSenken
Siehe: Horde N31 Heben/Senken
UnifiedTextParser.js:76 ✅ Normalized text (first 300 chars): Symbolik IDB: N33_HebenSenken
Siehe: Horde N31 Heben/Senken
enhancedWordParser.js:283 📌 Found program: Horde N34 Heben/Senken FB456
enhancedWordParser.js:295 📁 Created program with path: [AusfuhrHorden N31-N34 → Maschineteile → Horde N33 Heben/Senken] for "Horde N34 Heben/Senken"
enhancedWordParser.js:328 🗂️ Updated path level 2: "Horde N34 Heben/Senken" → [AusfuhrHorden N31-N34 → Maschineteile → Horde N34 Heben/Senken]
enhancedWordParser.js:314   ↳ IDB naam: N34_HebenSenken
enhancedWordParser.js:328 🗂️ Updated path level 1: "Strömung" → [AusfuhrHorden N31-N34 → Strömung → Horde N34 Heben/Senken]
enhancedWordParser.js:120 💾 Saving program: Horde N34 Heben/Senken
UnifiedTextParser.js:56 🔧 Starting normalization for source: word
UnifiedTextParser.js:57 📝 Original text (first 300 chars): Symbolik IDB: N34_HebenSenken
Siehe: Horde N31 Heben/Senken
UnifiedTextParser.js:76 ✅ Normalized text (first 300 chars): Symbolik IDB: N34_HebenSenken
Siehe: Horde N31 Heben/Senken
enhancedWordParser.js:137 📊 Parse result for Horde N34 Heben/Senken: Object
UnifiedTextParser.js:56 🔧 Starting normalization for source: word
UnifiedTextParser.js:57 📝 Original text (first 300 chars): Symbolik IDB: N34_HebenSenken
Siehe: Horde N31 Heben/Senken
UnifiedTextParser.js:76 ✅ Normalized text (first 300 chars): Symbolik IDB: N34_HebenSenken
Siehe: Horde N31 Heben/Senken
enhancedWordParser.js:283 📌 Found program: Strömungsjets 2N11-2N14-101 FB490
enhancedWordParser.js:295 📁 Created program with path: [AusfuhrHorden N31-N34 → Strömung] for "Strömungsjets 2N11-2N14-101"
enhancedWordParser.js:328 🗂️ Updated path level 2: "Strömungsjets 2N11-2N14-101" → [AusfuhrHorden N31-N34 → Strömung → Strömungsjets 2N11-2N14-101]
enhancedWordParser.js:314   ↳ IDB naam: Strömungsjets Ausfuhr
enhancedWordParser.js:120 💾 Saving program: Strömungsjets 2N11-2N14-101
UnifiedTextParser.js:56 🔧 Starting normalization for source: word
UnifiedTextParser.js:57 📝 Original text (first 300 chars): Symbolik IDB: Strömungsjets Ausfuhr
Strömungsjet für Horde N31 öffnen (N31-300) =
Horde N31 wird entleert (Entleeren Horde N31 SCHRITT 5-8)
Tür und Strömungsjet zwischen Horden 2N11/N31 unten (2N11-101)
Strömungsjet für Horde N32 öffnen (N32-300) =
Horde 2N32 wird entleert (Entleeren Horde 2N32 SCHR
UnifiedTextParser.js:76 ✅ Normalized text (first 300 chars): Symbolik IDB: Strömungsjets Ausfuhr
Strömungsjet für Horde N31 öffnen (N31-300) = Horde N31 wird entleert (Entleeren Horde N31 SCHRITT 5-8)
Tür und Strömungsjet zwischen Horden 2N11/N31 unten (2N11-101)
Strömungsjet für Horde N32 öffnen (N32-300) = Horde 2N32 wird entleert (Entleeren Horde 2N32 SCHR
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 2: "Strömungsjet für Horde N31 öffnen (N31-300) = Horde N31 wird entleert (Entleeren Horde N31 SCHRITT 5-8)"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "Strömungsjet für Horde N31 öffnen (N31-300) = Horde N31 wird entleert (Entleeren Horde N31 SCHRITT 5-8)" (length: 103)
EnhancedLogicParser.js:122 🎯 Character codes: Array(103)
EnhancedLogicParser.js:123 🎯 Step match result: null
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 4: "Strömungsjet für Horde N32 öffnen (N32-300) = Horde 2N32 wird entleert (Entleeren Horde 2N32 SCHRITT 5-8)"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "Strömungsjet für Horde N32 öffnen (N32-300) = Horde 2N32 wird entleert (Entleeren Horde 2N32 SCHRITT 5-8)" (length: 105)
EnhancedLogicParser.js:122 🎯 Character codes: Array(105)
EnhancedLogicParser.js:123 🎯 Step match result: null
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 6: "Strömungsjet für Horde N33 öffnen (N33-300) = Horde 2N33 wird entleert (Entleeren Horde 2N33 SCHRITT 5-8)"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "Strömungsjet für Horde N33 öffnen (N33-300) = Horde 2N33 wird entleert (Entleeren Horde 2N33 SCHRITT 5-8)" (length: 105)
EnhancedLogicParser.js:122 🎯 Character codes: Array(105)
EnhancedLogicParser.js:123 🎯 Step match result: null
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 8: "Strömungsjet für Horde N34 öffnen (N34-300) = Horde 2N34 wird entleert (Entleeren Horde 2N34 SCHRITT 5-8)"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "Strömungsjet für Horde N34 öffnen (N34-300) = Horde 2N34 wird entleert (Entleeren Horde 2N34 SCHRITT 5-8)" (length: 105)
EnhancedLogicParser.js:122 🎯 Character codes: Array(105)
EnhancedLogicParser.js:123 🎯 Step match result: null
enhancedWordParser.js:137 📊 Parse result for Strömungsjets 2N11-2N14-101: Object
UnifiedTextParser.js:56 🔧 Starting normalization for source: word
UnifiedTextParser.js:57 📝 Original text (first 300 chars): Symbolik IDB: Strömungsjets Ausfuhr
Strömungsjet für Horde N31 öffnen (N31-300) =
Horde N31 wird entleert (Entleeren Horde N31 SCHRITT 5-8)
Tür und Strömungsjet zwischen Horden 2N11/N31 unten (2N11-101)
Strömungsjet für Horde N32 öffnen (N32-300) =
Horde 2N32 wird entleert (Entleeren Horde 2N32 SCHR
UnifiedTextParser.js:76 ✅ Normalized text (first 300 chars): Symbolik IDB: Strömungsjets Ausfuhr
Strömungsjet für Horde N31 öffnen (N31-300) = Horde N31 wird entleert (Entleeren Horde N31 SCHRITT 5-8)
Tür und Strömungsjet zwischen Horden 2N11/N31 unten (2N11-101)
Strömungsjet für Horde N32 öffnen (N32-300) = Horde 2N32 wird entleert (Entleeren Horde 2N32 SCHR
enhancedWordParser.js:283 📌 Found program: Strömungspumpe P04 FB492
enhancedWordParser.js:295 📁 Created program with path: [AusfuhrHorden N31-N34 → Strömung → Strömungsjets 2N11-2N14-101] for "Strömungspumpe P04"
enhancedWordParser.js:328 🗂️ Updated path level 2: "Strömungspumpe P04" → [AusfuhrHorden N31-N34 → Strömung → Strömungspumpe P04]
enhancedWordParser.js:314   ↳ IDB naam: Strömungspumpe P04
enhancedWordParser.js:328 🗂️ Updated path level 0: "Salzbad N20" → [Salzbad N20 → Strömung → Strömungspumpe P04]
enhancedWordParser.js:120 💾 Saving program: Strömungspumpe P04
UnifiedTextParser.js:56 🔧 Starting normalization for source: word
UnifiedTextParser.js:57 📝 Original text (first 300 chars): Symbolik IDB: Strömungspumpe P04
Start Pumpe Strömungsjets Ausfuhr P04 =
NICHT P04 HAND
[Horde N31 wird entleert (Entleeren Horde N31 SCHRITT 5-8)
N31 auf Position
+
Horde N32 wird entleert (Entleeren Horde N32 SCHRITT 5-8)
N32 auf Position
+
Horde N33 wird entleert (Entleeren Horde N33 SCHRITT 5-8)
UnifiedTextParser.js:76 ✅ Normalized text (first 300 chars): Symbolik IDB: Strömungspumpe P04
Start Pumpe Strömungsjets Ausfuhr P04 = NICHT P04 HAND
[Horde N31 wird entleert (Entleeren Horde N31 SCHRITT 5-8)
N31 auf Position
+ Horde N32 wird entleert (Entleeren Horde N32 SCHRITT 5-8)
N32 auf Position
+ Horde N33 wird entleert (Entleeren Horde N33 SCHRITT 5-8)
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 3: "[Horde N31 wird entleert (Entleeren Horde N31 SCHRITT 5-8)"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "[Horde N31 wird entleert (Entleeren Horde N31 SCHRITT 5-8)" (length: 58)
EnhancedLogicParser.js:122 🎯 Character codes: Array(58)
EnhancedLogicParser.js:123 🎯 Step match result: null
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 5: "+ Horde N32 wird entleert (Entleeren Horde N32 SCHRITT 5-8)"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "+ Horde N32 wird entleert (Entleeren Horde N32 SCHRITT 5-8)" (length: 59)
EnhancedLogicParser.js:122 🎯 Character codes: Array(59)
EnhancedLogicParser.js:123 🎯 Step match result: null
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 7: "+ Horde N33 wird entleert (Entleeren Horde N33 SCHRITT 5-8)"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "+ Horde N33 wird entleert (Entleeren Horde N33 SCHRITT 5-8)" (length: 59)
EnhancedLogicParser.js:122 🎯 Character codes: Array(59)
EnhancedLogicParser.js:123 🎯 Step match result: null
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 9: "+ Horde N34 wird entleert (Entleeren Horde N34 SCHRITT 5-8)"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "+ Horde N34 wird entleert (Entleeren Horde N34 SCHRITT 5-8)" (length: 59)
EnhancedLogicParser.js:122 🎯 Character codes: Array(59)
EnhancedLogicParser.js:123 🎯 Step match result: null
enhancedWordParser.js:137 📊 Parse result for Strömungspumpe P04: Object
UnifiedTextParser.js:56 🔧 Starting normalization for source: word
UnifiedTextParser.js:57 📝 Original text (first 300 chars): Symbolik IDB: Strömungspumpe P04
Start Pumpe Strömungsjets Ausfuhr P04 =
NICHT P04 HAND
[Horde N31 wird entleert (Entleeren Horde N31 SCHRITT 5-8)
N31 auf Position
+
Horde N32 wird entleert (Entleeren Horde N32 SCHRITT 5-8)
N32 auf Position
+
Horde N33 wird entleert (Entleeren Horde N33 SCHRITT 5-8)
UnifiedTextParser.js:76 ✅ Normalized text (first 300 chars): Symbolik IDB: Strömungspumpe P04
Start Pumpe Strömungsjets Ausfuhr P04 = NICHT P04 HAND
[Horde N31 wird entleert (Entleeren Horde N31 SCHRITT 5-8)
N31 auf Position
+ Horde N32 wird entleert (Entleeren Horde N32 SCHRITT 5-8)
N32 auf Position
+ Horde N33 wird entleert (Entleeren Horde N33 SCHRITT 5-8)
enhancedWordParser.js:283 📌 Found program: Strömung Salzbad N20 FB500
enhancedWordParser.js:295 📁 Created program with path: [Salzbad N20] for "Strömung Salzbad N20"
enhancedWordParser.js:328 🗂️ Updated path level 1: "Strömung Salzbad N20" → [Salzbad N20 → Strömung Salzbad N20]
enhancedWordParser.js:314   ↳ IDB naam: Strömung N20
enhancedWordParser.js:120 💾 Saving program: Strömung Salzbad N20
UnifiedTextParser.js:56 🔧 Starting normalization for source: word
UnifiedTextParser.js:57 📝 Original text (first 300 chars): Symbolik IDB: Strömung N20
Start Zirkulationspumpe linker Seite Salzbad MP01 =
NICHT MP01 HAND
Niveau in Salzbad nicht zu niedrig (Niveau Salzbad(N20-400) &gt; Einstellung)
Stopp Zirkulationspumpe linker Seite MP01 =
Störung: Zirkulationspumpe Salzbad MP01
Variable 1 (Geschwindigkeit MP01) =
= Einst
UnifiedTextParser.js:76 ✅ Normalized text (first 300 chars): Symbolik IDB: Strömung N20
Start Zirkulationspumpe linker Seite Salzbad MP01 = NICHT MP01 HAND
Niveau in Salzbad nicht zu niedrig (Niveau Salzbad(N20-400) &gt; Einstellung)
Stopp Zirkulationspumpe linker Seite MP01 = Störung: Zirkulationspumpe Salzbad MP01
Variable 1 (Geschwindigkeit MP01) = = Einst
enhancedWordParser.js:137 📊 Parse result for Strömung Salzbad N20: Object
UnifiedTextParser.js:56 🔧 Starting normalization for source: word
UnifiedTextParser.js:57 📝 Original text (first 300 chars): Symbolik IDB: Strömung N20
Start Zirkulationspumpe linker Seite Salzbad MP01 =
NICHT MP01 HAND
Niveau in Salzbad nicht zu niedrig (Niveau Salzbad(N20-400) &gt; Einstellung)
Stopp Zirkulationspumpe linker Seite MP01 =
Störung: Zirkulationspumpe Salzbad MP01
Variable 1 (Geschwindigkeit MP01) =
= Einst
UnifiedTextParser.js:76 ✅ Normalized text (first 300 chars): Symbolik IDB: Strömung N20
Start Zirkulationspumpe linker Seite Salzbad MP01 = NICHT MP01 HAND
Niveau in Salzbad nicht zu niedrig (Niveau Salzbad(N20-400) &gt; Einstellung)
Stopp Zirkulationspumpe linker Seite MP01 = Störung: Zirkulationspumpe Salzbad MP01
Variable 1 (Geschwindigkeit MP01) = = Einst
enhancedWordParser.js:283 📌 Found program: Entleeren Salzbad/Füllen Puffertank FB504
enhancedWordParser.js:295 📁 Created program with path: [Salzbad N20 → Strömung Salzbad N20] for "Entleeren Salzbad/Füllen Puffertank"
enhancedWordParser.js:328 🗂️ Updated path level 1: "Entleeren Salzbad/Füllen Puffertank" → [Salzbad N20 → Entleeren Salzbad/Füllen Puffertank]
enhancedWordParser.js:314   ↳ IDB naam: Entleeren N20
enhancedWordParser.js:328 🗂️ Updated path level 0: "Chargedaten" → [Chargedaten → Entleeren Salzbad/Füllen Puffertank]
enhancedWordParser.js:120 💾 Saving program: Entleeren Salzbad/Füllen Puffertank
UnifiedTextParser.js:56 🔧 Starting normalization for source: word
UnifiedTextParser.js:57 📝 Original text (first 300 chars): Symbolik IDB: Entleeren N20
RUHE Entleeren Salzbad/ Füllen Puffertank
Anfrage Abfuhr
SCHRITT 1 Freigabe?
NICHT Pumpe MP06 dreht
SCHRITT 2 Start Pumpe MP06
Pumpe MP06 dreht
Zeit (0.5 Sek)
SCHRITT 3 Öffnen 125T2FV02
Route_OK (Komm. Signal von SB4: Füllen Tank 125T2)
SCHRITT 4 Start Entleeren läuft
NIC
UnifiedTextParser.js:76 ✅ Normalized text (first 300 chars): Symbolik IDB: Entleeren N20
RUHE: Entleeren Salzbad/ Füllen Puffertank
Anfrage Abfuhr
SCHRITT 1: Freigabe?
NICHT Pumpe MP06 dreht
SCHRITT 2: Start Pumpe MP06
Pumpe MP06 dreht
Zeit (0.5 Sek)
SCHRITT 3: Öffnen 125T2FV02
Route_OK (Komm. Signal von SB4: Füllen Tank 125T2)
SCHRITT 4: Start Entleeren läuf
EnhancedLogicParser.js:127 ✅ Successfully parsed step: RUHE  - Entleeren Salzbad/ Füllen Puffertank
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 4: "SCHRITT 1: Freigabe?"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "SCHRITT 1: Freigabe?" (length: 20)
EnhancedLogicParser.js:122 🎯 Character codes: Array(20)
EnhancedLogicParser.js:123 🎯 Step match result: Array(4)
EnhancedLogicParser.js:127 ✅ Successfully parsed step: SCHRITT 1 - Freigabe?
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:190 🔍 Detected condition on line 5: "NICHT Pumpe MP06 dreht" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 5: "Pumpe MP06 dreht" (OR: false, NOT: true)
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 6: "SCHRITT 2: Start Pumpe MP06"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "SCHRITT 2: Start Pumpe MP06" (length: 27)
EnhancedLogicParser.js:122 🎯 Character codes: Array(27)
EnhancedLogicParser.js:123 🎯 Step match result: Array(4)
EnhancedLogicParser.js:127 ✅ Successfully parsed step: SCHRITT 2 - Start Pumpe MP06
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 9: "SCHRITT 3: Öffnen 125T2FV02"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "SCHRITT 3: Öffnen 125T2FV02" (length: 27)
EnhancedLogicParser.js:122 🎯 Character codes: Array(27)
EnhancedLogicParser.js:123 🎯 Step match result: Array(4)
EnhancedLogicParser.js:127 ✅ Successfully parsed step: SCHRITT 3 - Öffnen 125T2FV02
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:190 🔍 Detected condition on line 10: "Route_OK (Komm. Signal von SB4: Füllen Tank 125T2)" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 10: "Route_OK (Komm. Signal von SB4: Füllen Tank 125T2)" (OR: false, NOT: false)
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 11: "SCHRITT 4: Start Entleeren läuft"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "SCHRITT 4: Start Entleeren läuft" (length: 32)
EnhancedLogicParser.js:122 🎯 Character codes: Array(32)
EnhancedLogicParser.js:123 🎯 Step match result: Array(4)
EnhancedLogicParser.js:127 ✅ Successfully parsed step: SCHRITT 4 - Start Entleeren läuft
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:190 🔍 Detected condition on line 12: "NICHT Freigabe ??" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 12: "Freigabe ??" (OR: false, NOT: true)
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 13: "SCHRITT 5: Stopp Entleeren Salzbad"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "SCHRITT 5: Stopp Entleeren Salzbad" (length: 34)
EnhancedLogicParser.js:122 🎯 Character codes: Array(34)
EnhancedLogicParser.js:123 🎯 Step match result: Array(4)
EnhancedLogicParser.js:127 ✅ Successfully parsed step: SCHRITT 5 - Stopp Entleeren Salzbad
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 15: "SCHRITT 6: Stopp Pumpe 2MP62/2MP72"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "SCHRITT 6: Stopp Pumpe 2MP62/2MP72" (length: 34)
EnhancedLogicParser.js:122 🎯 Character codes: Array(34)
EnhancedLogicParser.js:123 🎯 Step match result: Array(4)
EnhancedLogicParser.js:127 ✅ Successfully parsed step: SCHRITT 6 - Stopp Pumpe 2MP62/2MP72
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:190 🔍 Detected condition on line 16: "NICHT Pumpe 2MP62 dreht" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 16: "Pumpe 2MP62 dreht" (OR: false, NOT: true)
EnhancedLogicParser.js:190 🔍 Detected condition on line 17: "NICHT Pumpe 2MP72 dreht" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 17: "Pumpe 2MP72 dreht" (OR: false, NOT: true)
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 18: "SCHRITT 7: Schließen 125T2FV02"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "SCHRITT 7: Schließen 125T2FV02" (length: 30)
EnhancedLogicParser.js:122 🎯 Character codes: Array(30)
EnhancedLogicParser.js:123 🎯 Step match result: Array(4)
EnhancedLogicParser.js:127 ✅ Successfully parsed step: SCHRITT 7 - Schließen 125T2FV02
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:190 🔍 Detected condition on line 19: "NICHT Route_OK (Komm. Signal von SB4: Füllen Tank 125T2)" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 19: "Route_OK (Komm. Signal von SB4: Füllen Tank 125T2)" (OR: false, NOT: true)
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 20: "SCHRITT 8: Fertig"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "SCHRITT 8: Fertig" (length: 17)
EnhancedLogicParser.js:122 🎯 Character codes: Array(17)
EnhancedLogicParser.js:123 🎯 Step match result: Array(4)
EnhancedLogicParser.js:127 ✅ Successfully parsed step: SCHRITT 8 - Fertig
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:190 🔍 Detected condition on line 21: "Freigabe von Puffertanks = Route_OK (Komm. Signal von puffertank)" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 21: "Freigabe von Puffertanks = Route_OK (Komm. Signal von puffertank)" (OR: false, NOT: false)
EnhancedLogicParser.js:214 📝 Found variable assignment: "Freigabe von Puffertanks = Route_OK (Komm. Signal von puffertank)"
EnhancedLogicParser.js:190 🔍 Detected condition on line 22: "NICHT Handbedienung oder Störung aktiv" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 22: "Handbedienung oder Störung aktiv" (OR: false, NOT: true)
EnhancedLogicParser.js:190 🔍 Detected condition on line 23: "Handbedienung oder Störung aktiv = 2MP62 auf HAND" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 23: "Handbedienung oder Störung aktiv = 2MP62 auf HAND" (OR: false, NOT: false)
EnhancedLogicParser.js:214 📝 Found variable assignment: "Handbedienung oder Störung aktiv = 2MP62 auf HAND"
EnhancedLogicParser.js:190 🔍 Detected condition on line 24: "+ 2MP62 Störung" (markers: true, indented: false, implicit: false)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 24: "2MP62 Störung" (OR: true, NOT: false)
EnhancedLogicParser.js:190 🔍 Detected condition on line 25: "+ 2MP72 auf HAND" (markers: true, indented: false, implicit: false)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 25: "2MP72 auf HAND" (OR: true, NOT: false)
EnhancedLogicParser.js:190 🔍 Detected condition on line 26: "+ 2MP72 Störung" (markers: true, indented: false, implicit: false)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 26: "2MP72 Störung" (OR: true, NOT: false)
EnhancedLogicParser.js:190 🔍 Detected condition on line 27: "Anfrage Abfuhr = ACTSP-Niveau N20" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 27: "Anfrage Abfuhr = ACTSP-Niveau N20" (OR: false, NOT: false)
EnhancedLogicParser.js:214 📝 Found variable assignment: "Anfrage Abfuhr = ACTSP-Niveau N20"
EnhancedLogicParser.js:190 🔍 Detected condition on line 29: "Freigabe (Komm. Signal von SB4: Füllen Tank xx??)" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 29: "Freigabe (Komm. Signal von SB4: Füllen Tank xx??)" (OR: false, NOT: false)
EnhancedLogicParser.js:190 🔍 Detected condition on line 30: "Freigabe Pumpe MP62 Pumpe von Salzbad 2.1 nach Puffertank 125T2 =" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 30: "Freigabe Pumpe MP62 Pumpe von Salzbad 2.1 nach Puffertank 125T2 =" (OR: false, NOT: false)
EnhancedLogicParser.js:214 📝 Found variable assignment: "Freigabe Pumpe MP62 Pumpe von Salzbad 2.1 nach Puffertank 125T2 ="
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 31: "SCHRITT 2: -5"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "SCHRITT 2: -5" (length: 13)
EnhancedLogicParser.js:122 🎯 Character codes: Array(13)
EnhancedLogicParser.js:123 🎯 Step match result: Array(4)
EnhancedLogicParser.js:127 ✅ Successfully parsed step: SCHRITT 2 - -5
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:190 🔍 Detected condition on line 32: "NICHT LSL-Niveau 2N15" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 32: "LSL-Niveau 2N15" (OR: false, NOT: true)
EnhancedLogicParser.js:190 🔍 Detected condition on line 34: "Stopp Pumpe 2MP62 Pumpe von Salzbad 2.1 nach Puffertank 125T2 = Störung: Pumpe 2MP62 Pumpe von Salzbad nach Puffertanks" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 34: "Stopp Pumpe 2MP62 Pumpe von Salzbad 2.1 nach Puffertank 125T2 = Störung: Pumpe 2MP62 Pumpe von Salzbad nach Puffertanks" (OR: false, NOT: false)
EnhancedLogicParser.js:214 📝 Found variable assignment: "Stopp Pumpe 2MP62 Pumpe von Salzbad 2.1 nach Puffertank 125T2 = Störung: Pumpe 2MP62 Pumpe von Salzbad nach Puffertanks"
EnhancedLogicParser.js:190 🔍 Detected condition on line 35: "+ Störung: Analog Eingang 2N15-400-PT (Niveaumessung in Salzbad)" (markers: true, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 35: "Störung: Analog Eingang 2N15-400-PT (Niveaumessung in Salzbad)" (OR: true, NOT: false)
EnhancedLogicParser.js:190 🔍 Detected condition on line 36: "Freigabe Pumpe 2MP72 Pumpe von Salzbad 2.2 nach Puffertank 125T2 =" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 36: "Freigabe Pumpe 2MP72 Pumpe von Salzbad 2.2 nach Puffertank 125T2 =" (OR: false, NOT: false)
EnhancedLogicParser.js:214 📝 Found variable assignment: "Freigabe Pumpe 2MP72 Pumpe von Salzbad 2.2 nach Puffertank 125T2 ="
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 37: "SCHRITT 2: -5"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "SCHRITT 2: -5" (length: 13)
EnhancedLogicParser.js:122 🎯 Character codes: Array(13)
EnhancedLogicParser.js:123 🎯 Step match result: Array(4)
EnhancedLogicParser.js:127 ✅ Successfully parsed step: SCHRITT 2 - -5
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:190 🔍 Detected condition on line 38: "NICHT LSL-Niveau 2N17" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 38: "LSL-Niveau 2N17" (OR: false, NOT: true)
EnhancedLogicParser.js:190 🔍 Detected condition on line 40: "Stopp Pumpe 2MP72 Pumpe von Salzbad 2.2 nach Puffertank 125T2 = Störung: Pumpe 2MP72 Pumpe von Salzbad nach Puffertanks" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 40: "Stopp Pumpe 2MP72 Pumpe von Salzbad 2.2 nach Puffertank 125T2 = Störung: Pumpe 2MP72 Pumpe von Salzbad nach Puffertanks" (OR: false, NOT: false)
EnhancedLogicParser.js:214 📝 Found variable assignment: "Stopp Pumpe 2MP72 Pumpe von Salzbad 2.2 nach Puffertank 125T2 = Störung: Pumpe 2MP72 Pumpe von Salzbad nach Puffertanks"
EnhancedLogicParser.js:190 🔍 Detected condition on line 41: "+ Störung: Analog Eingang 2N17-400-PT (Niveaumessung in Salzbad)" (markers: true, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 41: "Störung: Analog Eingang 2N17-400-PT (Niveaumessung in Salzbad)" (OR: true, NOT: false)
EnhancedLogicParser.js:190 🔍 Detected condition on line 42: "Freigabe Öffnen Zufuhrventil Tank 125T2FV02 =" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 42: "Freigabe Öffnen Zufuhrventil Tank 125T2FV02 =" (OR: false, NOT: false)
EnhancedLogicParser.js:214 📝 Found variable assignment: "Freigabe Öffnen Zufuhrventil Tank 125T2FV02 ="
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 43: "SCHRITT 3: -6"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "SCHRITT 3: -6" (length: 13)
EnhancedLogicParser.js:122 🎯 Character codes: Array(13)
EnhancedLogicParser.js:123 🎯 Step match result: Array(4)
EnhancedLogicParser.js:127 ✅ Successfully parsed step: SCHRITT 3 - -6
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:190 🔍 Detected condition on line 44: "Anfrage (Komm. Signal nach SB4: Füllen Tank: Anfrage Salzlake abfuhren von Salzbad nach Puffertank) = Anfrage Abfuhr" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 44: "Anfrage (Komm. Signal nach SB4: Füllen Tank: Anfrage Salzlake abfuhren von Salzbad nach Puffertank) = Anfrage Abfuhr" (OR: false, NOT: false)
EnhancedLogicParser.js:214 📝 Found variable assignment: "Anfrage (Komm. Signal nach SB4: Füllen Tank: Anfrage Salzlake abfuhren von Salzbad nach Puffertank) = Anfrage Abfuhr"
EnhancedLogicParser.js:190 🔍 Detected condition on line 46: "Läuft (Komm. Signal nach SB4: Füllen Tank: Zufuhrpumpe 2MP62 oder 2MP72 nach Puffertank läuft) = Pumpe 2MP62 dreht" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 46: "Läuft (Komm. Signal nach SB4: Füllen Tank: Zufuhrpumpe 2MP62 oder 2MP72 nach Puffertank läuft) = Pumpe 2MP62 dreht" (OR: false, NOT: false)
EnhancedLogicParser.js:214 📝 Found variable assignment: "Läuft (Komm. Signal nach SB4: Füllen Tank: Zufuhrpumpe 2MP62 oder 2MP72 nach Puffertank läuft) = Pumpe 2MP62 dreht"
EnhancedLogicParser.js:190 🔍 Detected condition on line 47: "+ Pumpe 2MP72 dreht" (markers: true, indented: false, implicit: false)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 47: "Pumpe 2MP72 dreht" (OR: true, NOT: false)
enhancedWordParser.js:137 📊 Parse result for Entleeren Salzbad/Füllen Puffertank: Object
UnifiedTextParser.js:56 🔧 Starting normalization for source: word
UnifiedTextParser.js:57 📝 Original text (first 300 chars): Symbolik IDB: Entleeren N20
RUHE Entleeren Salzbad/ Füllen Puffertank
Anfrage Abfuhr
SCHRITT 1 Freigabe?
NICHT Pumpe MP06 dreht
SCHRITT 2 Start Pumpe MP06
Pumpe MP06 dreht
Zeit (0.5 Sek)
SCHRITT 3 Öffnen 125T2FV02
Route_OK (Komm. Signal von SB4: Füllen Tank 125T2)
SCHRITT 4 Start Entleeren läuft
NIC
UnifiedTextParser.js:76 ✅ Normalized text (first 300 chars): Symbolik IDB: Entleeren N20
RUHE: Entleeren Salzbad/ Füllen Puffertank
Anfrage Abfuhr
SCHRITT 1: Freigabe?
NICHT Pumpe MP06 dreht
SCHRITT 2: Start Pumpe MP06
Pumpe MP06 dreht
Zeit (0.5 Sek)
SCHRITT 3: Öffnen 125T2FV02
Route_OK (Komm. Signal von SB4: Füllen Tank 125T2)
SCHRITT 4: Start Entleeren läuf
enhancedWordParser.js:181 ✅ Stappen gevonden voor Entleeren Salzbad/Füllen Puffertank:
enhancedWordParser.js:183   - RUST 0: Entleeren Salzbad/ Füllen Puffertank
enhancedWordParser.js:183   - SCHRITT 1: Freigabe?
enhancedWordParser.js:183   - SCHRITT 2: Start Pumpe MP06
enhancedWordParser.js:183   - SCHRITT 3: Öffnen 125T2FV02
enhancedWordParser.js:183   - SCHRITT 4: Start Entleeren läuft
enhancedWordParser.js:183   - SCHRITT 5: Stopp Entleeren Salzbad
enhancedWordParser.js:183   - SCHRITT 6: Stopp Pumpe 2MP62/2MP72
enhancedWordParser.js:183   - SCHRITT 7: Schließen 125T2FV02
enhancedWordParser.js:183   - SCHRITT 8: Fertig
enhancedWordParser.js:183   - SCHRITT 2: -5
enhancedWordParser.js:183   - SCHRITT 2: -5
enhancedWordParser.js:183   - SCHRITT 3: -6
enhancedWordParser.js:283 📌 Found program: Datenübertragung mit K5 FB550
enhancedWordParser.js:295 📁 Created program with path: [Chargedaten] for "Datenübertragung mit K5"
enhancedWordParser.js:328 🗂️ Updated path level 1: "Datenübertragung mit K5" → [Chargedaten → Datenübertragung mit K5]
enhancedWordParser.js:120 💾 Saving program: Datenübertragung mit K5
UnifiedTextParser.js:56 🔧 Starting normalization for source: word
UnifiedTextParser.js:57 📝 Original text (first 300 chars): Aus Zeile 1 der Produktionstabelle von K5=5 kopieren wir direkt die Chargedaten nach Salzbad 5.Das sind die Chargedaten von der aktuellen Charge die in Einfuhrrinne N10/N11 eingeströmt wird.
Das sind die nachfolgende Chargedaten:
Chargenummer	Aktuelle Chargenummer
Käsekode	Aktuelle Käsekode
Besonder
UnifiedTextParser.js:76 ✅ Normalized text (first 300 chars): Aus Zeile 1 der Produktionstabelle von K5 = 5 kopieren wir direkt die Chargedaten nach Salzbad 5.Das sind die Chargedaten von der aktuellen Charge die in Einfuhrrinne N10/N11 eingeströmt wird.
Das sind die nachfolgende Chargedaten: Chargenummer Aktuelle Chargenummer
Käsekode Aktuelle Käsekode
Besond
enhancedWordParser.js:137 📊 Parse result for Datenübertragung mit K5: Object
UnifiedTextParser.js:56 🔧 Starting normalization for source: word
UnifiedTextParser.js:57 📝 Original text (first 300 chars): Aus Zeile 1 der Produktionstabelle von K5=5 kopieren wir direkt die Chargedaten nach Salzbad 5.Das sind die Chargedaten von der aktuellen Charge die in Einfuhrrinne N10/N11 eingeströmt wird.
Das sind die nachfolgende Chargedaten:
Chargenummer	Aktuelle Chargenummer
Käsekode	Aktuelle Käsekode
Besonder
UnifiedTextParser.js:76 ✅ Normalized text (first 300 chars): Aus Zeile 1 der Produktionstabelle von K5 = 5 kopieren wir direkt die Chargedaten nach Salzbad 5.Das sind die Chargedaten von der aktuellen Charge die in Einfuhrrinne N10/N11 eingeströmt wird.
Das sind die nachfolgende Chargedaten: Chargenummer Aktuelle Chargenummer
Käsekode Aktuelle Käsekode
Besond
enhancedWordParser.js:283 📌 Found program: Chargedaten N10 FB552
enhancedWordParser.js:295 📁 Created program with path: [Chargedaten → Datenübertragung mit K5] for "Chargedaten N10"
enhancedWordParser.js:328 🗂️ Updated path level 1: "Chargedaten N10" → [Chargedaten → Chargedaten N10]
enhancedWordParser.js:314   ↳ IDB naam: Chargedaten N10
enhancedWordParser.js:120 💾 Saving program: Chargedaten N10
UnifiedTextParser.js:56 🔧 Starting normalization for source: word
UnifiedTextParser.js:57 📝 Original text (first 300 chars): Symbolik IDB: Chargedaten N10
RUHE (Chargedaten N10)
Chargenummer (Komm. von K5) &lt;&gt; 0
Käsekode (Komm. von K5) &lt;&gt; 0
Anzahl Käse (Komm. von K5) &lt;&gt; 0
+
von SCHRITT 5
ohne Bedingungen
SCHRITT 1 (Kopieren Daten von K5 nach neue Chargedaten)
Kopiert (Immer 1)
+
von RUHE
Manuell eingeführ
UnifiedTextParser.js:76 ✅ Normalized text (first 300 chars): Symbolik IDB: Chargedaten N10
RUHE: Chargedaten N10)
Chargenummer (Komm. von K5) &lt;&gt; 0
Käsekode (Komm. von K5) &lt;&gt; 0
Anzahl Käse (Komm. von K5) &lt;&gt; 0
+ von
SCHRITT 5: ohne Bedingungen
SCHRITT 1: (Kopieren Daten von K5 nach neue Chargedaten)
Kopiert (Immer 1)
+ von
RUHE: Manuell eingef
EnhancedLogicParser.js:127 ✅ Successfully parsed step: RUHE  - Chargedaten N10)
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:190 🔍 Detected condition on line 6: "+ von" (markers: true, indented: false, implicit: false)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 6: "von" (OR: true, NOT: false)
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 7: "SCHRITT 5: ohne Bedingungen"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "SCHRITT 5: ohne Bedingungen" (length: 27)
EnhancedLogicParser.js:122 🎯 Character codes: Array(27)
EnhancedLogicParser.js:123 🎯 Step match result: Array(4)
EnhancedLogicParser.js:127 ✅ Successfully parsed step: SCHRITT 5 - ohne Bedingungen
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 8: "SCHRITT 1: (Kopieren Daten von K5 nach neue Chargedaten)"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "SCHRITT 1: (Kopieren Daten von K5 nach neue Chargedaten)" (length: 56)
EnhancedLogicParser.js:122 🎯 Character codes: Array(56)
EnhancedLogicParser.js:123 🎯 Step match result: Array(4)
EnhancedLogicParser.js:127 ✅ Successfully parsed step: SCHRITT 1 - (Kopieren Daten von K5 nach neue Chargedaten)
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:190 🔍 Detected condition on line 10: "+ von" (markers: true, indented: false, implicit: false)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 10: "von" (OR: true, NOT: false)
EnhancedLogicParser.js:127 ✅ Successfully parsed step: RUHE  - Manuell eingeführte Chargedaten bei Aufstart: Einfuhr noch nicht gestartet(Hauptprogramm Einfuhr RUHE)
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 15: "SCHRITT 2: (Freigabe neue Chargedaten kopieren nach N10?)"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "SCHRITT 2: (Freigabe neue Chargedaten kopieren nach N10?)" (length: 57)
EnhancedLogicParser.js:122 🎯 Character codes: Array(57)
EnhancedLogicParser.js:123 🎯 Step match result: Array(4)
EnhancedLogicParser.js:127 ✅ Successfully parsed step: SCHRITT 2 - (Freigabe neue Chargedaten kopieren nach N10?)
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 17: "SCHRITT 3: (Neue Chargedaten kopieren nach N10)"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "SCHRITT 3: (Neue Chargedaten kopieren nach N10)" (length: 47)
EnhancedLogicParser.js:122 🎯 Character codes: Array(47)
EnhancedLogicParser.js:123 🎯 Step match result: Array(4)
EnhancedLogicParser.js:127 ✅ Successfully parsed step: SCHRITT 3 - (Neue Chargedaten kopieren nach N10)
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 19: "SCHRITT 4: (Charge aktiv / Zählen Käse)"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "SCHRITT 4: (Charge aktiv / Zählen Käse)" (length: 39)
EnhancedLogicParser.js:122 🎯 Character codes: Array(39)
EnhancedLogicParser.js:123 🎯 Step match result: Array(4)
EnhancedLogicParser.js:127 ✅ Successfully parsed step: SCHRITT 4 - (Charge aktiv / Zählen Käse)
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:190 🔍 Detected condition on line 20: "Anzahl Käse von Charge im N10 &gt; = Anzahl Käse (Chargedaten N10)" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 20: "Anzahl Käse von Charge im N10 &gt; = Anzahl Käse (Chargedaten N10)" (OR: false, NOT: false)
EnhancedLogicParser.js:214 📝 Found variable assignment: "Anzahl Käse von Charge im N10 &gt; = Anzahl Käse (Chargedaten N10)"
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 21: "Nicht Entleeren Einfuhrrinne von K5 bis N10 (Sortentrennung NICHT SCHRITT 1)"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "Nicht Entleeren Einfuhrrinne von K5 bis N10 (Sortentrennung NICHT SCHRITT 1)" (length: 76)
EnhancedLogicParser.js:122 🎯 Character codes: Array(76)
EnhancedLogicParser.js:123 🎯 Step match result: null
EnhancedLogicParser.js:190 🔍 Detected condition on line 21: "Nicht Entleeren Einfuhrrinne von K5 bis N10 (Sortentrennung NICHT SCHRITT 1)" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 21: "Entleeren Einfuhrrinne von K5 bis N10 (Sortentrennung NICHT SCHRITT 1)" (OR: false, NOT: true)
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 22: "+ Einfuhrrinne entleert bis Blockierung N10 (Sortentrennung SCHRITT 2)"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "+ Einfuhrrinne entleert bis Blockierung N10 (Sortentrennung SCHRITT 2)" (length: 70)
EnhancedLogicParser.js:122 🎯 Character codes: Array(70)
EnhancedLogicParser.js:123 🎯 Step match result: null
EnhancedLogicParser.js:190 🔍 Detected condition on line 22: "+ Einfuhrrinne entleert bis Blockierung N10 (Sortentrennung SCHRITT 2)" (markers: true, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 22: "Einfuhrrinne entleert bis Blockierung N10 (Sortentrennung SCHRITT 2)" (OR: true, NOT: false)
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 23: "SCHRITT 5: (Zurück nach SCHRITT 1)"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "SCHRITT 5: (Zurück nach SCHRITT 1)" (length: 34)
EnhancedLogicParser.js:122 🎯 Character codes: Array(34)
EnhancedLogicParser.js:123 🎯 Step match result: Array(4)
EnhancedLogicParser.js:127 ✅ Successfully parsed step: SCHRITT 5 - (Zurück nach SCHRITT 1)
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 25: "SCHRITT 1: -5"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "SCHRITT 1: -5" (length: 13)
EnhancedLogicParser.js:122 🎯 Character codes: Array(13)
EnhancedLogicParser.js:123 🎯 Step match result: Array(4)
EnhancedLogicParser.js:127 ✅ Successfully parsed step: SCHRITT 1 - -5
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 26: "Einfuhr beendet (Hauptprogramm Einfuhr SCHRITT ??)"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "Einfuhr beendet (Hauptprogramm Einfuhr SCHRITT ??)" (length: 50)
EnhancedLogicParser.js:122 🎯 Character codes: Array(50)
EnhancedLogicParser.js:123 🎯 Step match result: null
EnhancedLogicParser.js:190 🔍 Detected condition on line 26: "Einfuhr beendet (Hauptprogramm Einfuhr SCHRITT ??)" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 26: "Einfuhr beendet (Hauptprogramm Einfuhr SCHRITT ??)" (OR: false, NOT: false)
EnhancedLogicParser.js:190 🔍 Detected condition on line 27: "+ Ende Produktion (K5 in Ruhe) (Komm. von K5)" (markers: true, indented: false, implicit: false)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 27: "Ende Produktion (K5 in Ruhe) (Komm. von K5)" (OR: true, NOT: false)
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 28: "SCHRITT 6: (Kein Chargedaten mehr von K5?)"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "SCHRITT 6: (Kein Chargedaten mehr von K5?)" (length: 42)
EnhancedLogicParser.js:122 🎯 Character codes: Array(42)
EnhancedLogicParser.js:123 🎯 Step match result: Array(4)
EnhancedLogicParser.js:127 ✅ Successfully parsed step: SCHRITT 6 - (Kein Chargedaten mehr von K5?)
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:190 🔍 Detected condition on line 29: "Chargenummer (Komm. von K5) = 0" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 29: "Chargenummer (Komm. von K5) = 0" (OR: false, NOT: false)
EnhancedLogicParser.js:214 📝 Found variable assignment: "Chargenummer (Komm. von K5) = 0"
EnhancedLogicParser.js:190 🔍 Detected condition on line 30: "Käsekode (Komm. von K5) = 0" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 30: "Käsekode (Komm. von K5) = 0" (OR: false, NOT: false)
EnhancedLogicParser.js:214 📝 Found variable assignment: "Käsekode (Komm. von K5) = 0"
EnhancedLogicParser.js:190 🔍 Detected condition on line 31: "Anzahl Käse (Komm. von K5) = 0" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 31: "Anzahl Käse (Komm. von K5) = 0" (OR: false, NOT: false)
EnhancedLogicParser.js:214 📝 Found variable assignment: "Anzahl Käse (Komm. von K5) = 0"
EnhancedLogicParser.js:190 🔍 Detected condition on line 32: "+ DT Start Einfuhr" (markers: true, indented: false, implicit: false)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 32: "DT Start Einfuhr" (OR: true, NOT: false)
EnhancedLogicParser.js:190 🔍 Detected condition on line 33: "+ Ende Produktion (K5 in Ruhe) (Komm. von K5)" (markers: true, indented: false, implicit: false)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 33: "Ende Produktion (K5 in Ruhe) (Komm. von K5)" (OR: true, NOT: false)
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 34: "SCHRITT 7: (Fertig)"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "SCHRITT 7: (Fertig)" (length: 19)
EnhancedLogicParser.js:122 🎯 Character codes: Array(19)
EnhancedLogicParser.js:123 🎯 Step match result: Array(4)
EnhancedLogicParser.js:127 ✅ Successfully parsed step: SCHRITT 7 - (Fertig)
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:190 🔍 Detected condition on line 35: "Chargedaten OK = Chargenummer (Neue Chargedaten) &lt;&gt; 0" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 35: "Chargedaten OK = Chargenummer (Neue Chargedaten) &lt;&gt; 0" (OR: false, NOT: false)
EnhancedLogicParser.js:214 📝 Found variable assignment: "Chargedaten OK = Chargenummer (Neue Chargedaten) &lt;&gt; 0"
EnhancedLogicParser.js:190 🔍 Detected condition on line 36: "Besonderheit (Neue Chargedaten) = = 0,1,2" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 36: "Besonderheit (Neue Chargedaten) = = 0,1,2" (OR: false, NOT: false)
EnhancedLogicParser.js:214 📝 Found variable assignment: "Besonderheit (Neue Chargedaten) = = 0,1,2"
EnhancedLogicParser.js:190 🔍 Detected condition on line 41: "Neue Chargedaten = = Chargedaten (Komm. von K5)" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 41: "Neue Chargedaten = = Chargedaten (Komm. von K5)" (OR: false, NOT: false)
EnhancedLogicParser.js:214 📝 Found variable assignment: "Neue Chargedaten = = Chargedaten (Komm. von K5)"
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 42: "SCHRITT 1: 0"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "SCHRITT 1: 0" (length: 12)
EnhancedLogicParser.js:122 🎯 Character codes: Array(12)
EnhancedLogicParser.js:123 🎯 Step match result: Array(4)
EnhancedLogicParser.js:127 ✅ Successfully parsed step: SCHRITT 1 - 0
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 43: "SCHRITT 7: Chargedaten T10 = = Chargedaten (Neue Chargedaten)"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "SCHRITT 7: Chargedaten T10 = = Chargedaten (Neue Chargedaten)" (length: 61)
EnhancedLogicParser.js:122 🎯 Character codes: Array(61)
EnhancedLogicParser.js:123 🎯 Step match result: Array(4)
EnhancedLogicParser.js:127 ✅ Successfully parsed step: SCHRITT 7 - Chargedaten T10 = = Chargedaten (Neue Chargedaten)
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 44: "SCHRITT 3: 0"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "SCHRITT 3: 0" (length: 12)
EnhancedLogicParser.js:122 🎯 Character codes: Array(12)
EnhancedLogicParser.js:123 🎯 Step match result: Array(4)
EnhancedLogicParser.js:127 ✅ Successfully parsed step: SCHRITT 3 - 0
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:127 ✅ Successfully parsed step: RUHE  - Zähler 1 (Anzahl gezählte Käse von Charge bei N10) = +1
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 46: "SCHRITT 4: Käse detektiert auf mitten 2T09 (Käsezähler T09 SCHRITT 1&amp;2) = 0"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "SCHRITT 4: Käse detektiert auf mitten 2T09 (Käsezähler T09 SCHRITT 1&amp;2) = 0" (length: 79)
EnhancedLogicParser.js:122 🎯 Character codes: Array(79)
EnhancedLogicParser.js:123 🎯 Step match result: Array(4)
EnhancedLogicParser.js:127 ✅ Successfully parsed step: SCHRITT 4 - Käse detektiert auf mitten 2T09 (Käsezähler T09 SCHRITT 1&amp;2) = 0
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:127 ✅ Successfully parsed step: RUHE  - [Chargenummer (Komm. von K2) = 0
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:190 🔍 Detected condition on line 48: "Käsekode (Komm. von K2) = 0" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 48: "Käsekode (Komm. von K2) = 0" (OR: false, NOT: false)
EnhancedLogicParser.js:214 📝 Found variable assignment: "Käsekode (Komm. von K2) = 0"
EnhancedLogicParser.js:190 🔍 Detected condition on line 49: "Anzahl Käse (Komm. von K2) = 0" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 49: "Anzahl Käse (Komm. von K2) = 0" (OR: false, NOT: false)
EnhancedLogicParser.js:214 📝 Found variable assignment: "Anzahl Käse (Komm. von K2) = 0"
EnhancedLogicParser.js:190 🔍 Detected condition on line 50: "+ Bedienungsfunktionen SB2.2 Einfuhr EIN (NUR BEI BAD 2.1B: 2T19)]" (markers: true, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 50: "Bedienungsfunktionen SB2.2 Einfuhr EIN (NUR BEI BAD 2.1B: 2T19)]" (OR: true, NOT: false)
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 51: "+ SCHRITT 5"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "+ SCHRITT 5" (length: 11)
EnhancedLogicParser.js:122 🎯 Character codes: Array(11)
EnhancedLogicParser.js:123 🎯 Step match result: null
EnhancedLogicParser.js:190 🔍 Detected condition on line 51: "+ SCHRITT 5" (markers: true, indented: false, implicit: false)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 51: "SCHRITT 5" (OR: true, NOT: false)
EnhancedLogicParser.js:190 🔍 Detected condition on line 52: "Störung: Chargenummer von K2 nicht OK =" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 52: "Störung: Chargenummer von K2 nicht OK =" (OR: false, NOT: false)
EnhancedLogicParser.js:214 📝 Found variable assignment: "Störung: Chargenummer von K2 nicht OK ="
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 53: "SCHRITT 2: [Chargenummer (Neue Chargedaten) = 0"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "SCHRITT 2: [Chargenummer (Neue Chargedaten) = 0" (length: 47)
EnhancedLogicParser.js:122 🎯 Character codes: Array(47)
EnhancedLogicParser.js:123 🎯 Step match result: Array(4)
EnhancedLogicParser.js:127 ✅ Successfully parsed step: SCHRITT 2 - [Chargenummer (Neue Chargedaten) = 0
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:190 🔍 Detected condition on line 54: "Störung: Käsekode von K2 nicht OK =" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 54: "Störung: Käsekode von K2 nicht OK =" (OR: false, NOT: false)
EnhancedLogicParser.js:214 📝 Found variable assignment: "Störung: Käsekode von K2 nicht OK ="
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 55: "SCHRITT 2: [Käsekode (Neue Chargedaten) = 0"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "SCHRITT 2: [Käsekode (Neue Chargedaten) = 0" (length: 43)
EnhancedLogicParser.js:122 🎯 Character codes: Array(43)
EnhancedLogicParser.js:123 🎯 Step match result: Array(4)
EnhancedLogicParser.js:127 ✅ Successfully parsed step: SCHRITT 2 - [Käsekode (Neue Chargedaten) = 0
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:190 🔍 Detected condition on line 56: "+ NICHT Käsekode besteht]" (markers: true, indented: false, implicit: false)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 56: "Käsekode besteht]" (OR: true, NOT: true)
EnhancedLogicParser.js:190 🔍 Detected condition on line 57: "Störung: Besonderheit von K2 nicht OK =" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 57: "Störung: Besonderheit von K2 nicht OK =" (OR: false, NOT: false)
EnhancedLogicParser.js:214 📝 Found variable assignment: "Störung: Besonderheit von K2 nicht OK ="
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 58: "SCHRITT 2: Besonderheit (Neue Chargedaten) &lt;&gt; 0,1,2"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "SCHRITT 2: Besonderheit (Neue Chargedaten) &lt;&gt; 0,1,2" (length: 57)
EnhancedLogicParser.js:122 🎯 Character codes: Array(57)
EnhancedLogicParser.js:123 🎯 Step match result: Array(4)
EnhancedLogicParser.js:127 ✅ Successfully parsed step: SCHRITT 2 - Besonderheit (Neue Chargedaten) &lt;&gt; 0,1,2
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:190 🔍 Detected condition on line 59: "Störung: Anzahl Käse von K2 nicht OK =" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 59: "Störung: Anzahl Käse von K2 nicht OK =" (OR: false, NOT: false)
EnhancedLogicParser.js:214 📝 Found variable assignment: "Störung: Anzahl Käse von K2 nicht OK ="
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 60: "SCHRITT 2: Anzahl Käse (Neue Chargedaten) = 0"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "SCHRITT 2: Anzahl Käse (Neue Chargedaten) = 0" (length: 45)
EnhancedLogicParser.js:122 🎯 Character codes: Array(45)
EnhancedLogicParser.js:123 🎯 Step match result: Array(4)
EnhancedLogicParser.js:127 ✅ Successfully parsed step: SCHRITT 2 - Anzahl Käse (Neue Chargedaten) = 0
EnhancedLogicParser.js:156 📝 Created step: Object
EnhancedLogicParser.js:190 🔍 Detected condition on line 61: "Störung: Sollwert Salzungzeit ins Rezept nicht OK =" (markers: false, indented: false, implicit: true)
EnhancedLogicParser.js:209 🔍 Parsing condition on line 61: "Störung: Sollwert Salzungzeit ins Rezept nicht OK =" (OR: false, NOT: false)
EnhancedLogicParser.js:214 📝 Found variable assignment: "Störung: Sollwert Salzungzeit ins Rezept nicht OK ="
EnhancedLogicParser.js:91 🔍 Trying to parse step on line 62: "SCHRITT 2: NICHT Salzungszeit ins Rezept gültig"
EnhancedLogicParser.js:92 Available step keywords: Object
EnhancedLogicParser.js:120 🎯 Step pattern source: ^(RUST|RUHE|IDLE|STAP|SCHRITT|STEP)(?:\s+(\d+))?:\s*(.*)$
EnhancedLogicParser.js:121 🎯 Testing line: "SCHRITT 2: NICHT Salzungszeit ins Rezept gültig" (length: 47)
EnhancedLogicParser.js:122 🎯 Character codes: Array(47)
EnhancedLogicParser.js:123 🎯 Step match result: Array(4)
EnhancedLogicParser.js:127 ✅ Successfully parsed step: SCHRITT 2 - NICHT Salzungszeit ins Rezept gültig
EnhancedLogicParser.js:156 📝 Created step: Object
enhancedWordParser.js:137 📊 Parse result for Chargedaten N10: Object
UnifiedTextParser.js:56 🔧 Starting normalization for source: word
UnifiedTextParser.js:57 📝 Original text (first 300 chars): Symbolik IDB: Chargedaten N10
RUHE (Chargedaten N10)
Chargenummer (Komm. von K5) &lt;&gt; 0
Käsekode (Komm. von K5) &lt;&gt; 0
Anzahl Käse (Komm. von K5) &lt;&gt; 0
+
von SCHRITT 5
ohne Bedingungen
SCHRITT 1 (Kopieren Daten von K5 nach neue Chargedaten)
Kopiert (Immer 1)
+
von RUHE
Manuell eingeführ
UnifiedTextParser.js:76 ✅ Normalized text (first 300 chars): Symbolik IDB: Chargedaten N10
RUHE: Chargedaten N10)
Chargenummer (Komm. von K5) &lt;&gt; 0
Käsekode (Komm. von K5) &lt;&gt; 0
Anzahl Käse (Komm. von K5) &lt;&gt; 0
+ von
SCHRITT 5: ohne Bedingungen
SCHRITT 1: (Kopieren Daten von K5 nach neue Chargedaten)
Kopiert (Immer 1)
+ von
RUHE: Manuell eingef
enhancedWordParser.js:181 ✅ Stappen gevonden voor Chargedaten N10:
enhancedWordParser.js:183   - RUST 0: Chargedaten N10)
enhancedWordParser.js:183   - SCHRITT 5: ohne Bedingungen
enhancedWordParser.js:183   - SCHRITT 1: (Kopieren Daten von K5 nach neue Chargedaten)
enhancedWordParser.js:183   - RUST 0: Manuell eingeführte Chargedaten bei Aufstart: Einfuhr noch nicht gestartet(Hauptprogramm Einfuhr RUHE)
enhancedWordParser.js:183   - SCHRITT 2: (Freigabe neue Chargedaten kopieren nach N10?)
enhancedWordParser.js:183   - SCHRITT 3: (Neue Chargedaten kopieren nach N10)
enhancedWordParser.js:183   - SCHRITT 4: (Charge aktiv / Zählen Käse)
enhancedWordParser.js:183   - SCHRITT 5: (Zurück nach SCHRITT 1)
enhancedWordParser.js:183   - SCHRITT 1: -5
enhancedWordParser.js:183   - SCHRITT 6: (Kein Chargedaten mehr von K5?)
enhancedWordParser.js:183   - SCHRITT 7: (Fertig)
enhancedWordParser.js:183   - SCHRITT 1: 0
enhancedWordParser.js:183   - SCHRITT 7: Chargedaten T10 = = Chargedaten (Neue Chargedaten)
enhancedWordParser.js:183   - SCHRITT 3: 0
enhancedWordParser.js:183   - RUST 0: Zähler 1 (Anzahl gezählte Käse von Charge bei N10) = +1
enhancedWordParser.js:183   - SCHRITT 4: Käse detektiert auf mitten 2T09 (Käsezähler T09 SCHRITT 1&amp;2) = 0
enhancedWordParser.js:183   - RUST 0: [Chargenummer (Komm. von K2) = 0
enhancedWordParser.js:183   - SCHRITT 2: [Chargenummer (Neue Chargedaten) = 0
enhancedWordParser.js:183   - SCHRITT 2: [Käsekode (Neue Chargedaten) = 0
enhancedWordParser.js:183   - SCHRITT 2: Besonderheit (Neue Chargedaten) &lt;&gt; 0,1,2
enhancedWordParser.js:183   - SCHRITT 2: Anzahl Käse (Neue Chargedaten) = 0
enhancedWordParser.js:183   - SCHRITT 2: NICHT Salzungszeit ins Rezept gültig
enhancedWordParser.js:283 📌 Found program: Käserezept FC600
enhancedWordParser.js:295 📁 Created program with path: [Chargedaten] for "Käserezept"
enhancedWordParser.js:328 🗂️ Updated path level 0: "Käserezept" → [Käserezept → Chargedaten N10]
enhancedWordParser.js:120 💾 Saving program: Käserezept
UnifiedTextParser.js:56 🔧 Starting normalization for source: word
UnifiedTextParser.js:57 📝 Original text (first 300 chars): Es gibt 50 Käserezepte (gespeichert in DB600).
Das Käserezept besteht aus die folgende Parameter:
-Rezeptnummer
-Käsekode
-Rezeptname
-Salzungszeit
Mit DT Anforderung wird das selektierte Rezept (1..50) kopiert nach HMI01 (Käserezept 0). In dieses Rezept 0 können die Daten eingegeben oder geändert w
UnifiedTextParser.js:76 ✅ Normalized text (first 300 chars): Es gibt 50 Käserezepte (gespeichert in DB600).
Das Käserezept besteht aus die folgende Parameter: - Rezeptnummer
- Käsekode
- Rezeptname
- Salzungszeit
Mit DT Anforderung wird das selektierte Rezept (1..50) kopiert nach HMI01 (Käserezept 0). In dieses Rezept 0 können die Daten eingegeben oder geände
enhancedWordParser.js:137 📊 Parse result for Käserezept: Object
UnifiedTextParser.js:56 🔧 Starting normalization for source: word
UnifiedTextParser.js:57 📝 Original text (first 300 chars): Es gibt 50 Käserezepte (gespeichert in DB600).
Das Käserezept besteht aus die folgende Parameter:
-Rezeptnummer
-Käsekode
-Rezeptname
-Salzungszeit
Mit DT Anforderung wird das selektierte Rezept (1..50) kopiert nach HMI01 (Käserezept 0). In dieses Rezept 0 können die Daten eingegeben oder geändert w
UnifiedTextParser.js:76 ✅ Normalized text (first 300 chars): Es gibt 50 Käserezepte (gespeichert in DB600).
Das Käserezept besteht aus die folgende Parameter: - Rezeptnummer
- Käsekode
- Rezeptname
- Salzungszeit
Mit DT Anforderung wird das selektierte Rezept (1..50) kopiert nach HMI01 (Käserezept 0). In dieses Rezept 0 können die Daten eingegeben oder geände
enhancedWordParser.js:283 📌 Found program: Hordedaten FB701
enhancedWordParser.js:295 📁 Created program with path: [Käserezept] for "Hordedaten"
enhancedWordParser.js:328 🗂️ Updated path level 0: "Hordedaten" → [Hordedaten]
enhancedWordParser.js:314   ↳ IDB naam: 2N11_Käse
enhancedWordParser.js:314   ↳ IDB naam: 2N12_Käse
enhancedWordParser.js:314   ↳ IDB naam: 2N13_Käse
enhancedWordParser.js:314   ↳ IDB naam: 2N14_Käse
enhancedWordParser.js:314   ↳ IDB naam: 2N31_Käse
enhancedWordParser.js:314   ↳ IDB naam: 2N32_Käse
enhancedWordParser.js:314   ↳ IDB naam: 2N33_Käse
enhancedWordParser.js:314   ↳ IDB naam: 2N34_Käse
enhancedWordParser.js:314   ↳ IDB naam: 2N11_schreiben	DB1011: 2N11_Hordedaten
enhancedWordParser.js:314   ↳ IDB naam: 2N12_schreiben	DB1012: 2N12_Hordedaten
enhancedWordParser.js:314   ↳ IDB naam: 2N13_schreiben	DB1013: 2N13_Hordedaten
enhancedWordParser.js:314   ↳ IDB naam: 2N14_schreiben	DB1014: 2N14_Hordedaten
enhancedWordParser.js:314   ↳ IDB naam: 2N31_schreiben	DB1031: 2N31_Hordedaten
enhancedWordParser.js:314   ↳ IDB naam: 2N32_schreiben	DB1032: 2N32_Hordedaten
enhancedWordParser.js:314   ↳ IDB naam: 2N33_schreiben	DB1033: 2N33_Hordedaten
enhancedWordParser.js:314   ↳ IDB naam: 2N34_schreiben	DB1034: 2N34_Hordedaten
enhancedWordParser.js:328 🗂️ Updated path level 0: "Salzbad 2.2: Horden 2N51/2N52/2N53" → [Salzbad 2.2: Horden 2N51/2N52/2N53]
enhancedWordParser.js:120 💾 Saving program: Hordedaten
UnifiedTextParser.js:56 🔧 Starting normalization for source: word
UnifiedTextParser.js:57 📝 Original text (first 300 chars): Käse in Horde:
FB701: Symbolik IDB: 2N11_Käse
FB702: Symbolik IDB: 2N12_Käse
FB703: Symbolik IDB: 2N13_Käse
FB704: Symbolik IDB: 2N14_Käse
FB711: Symbolik IDB: 2N31_Käse
FB712: Symbolik IDB: 2N32_Käse
FB713: Symbolik IDB: 2N33_Käse
FB714: Symbolik IDB: 2N34_Käse
Daten schreiben in Horde	Hordedaten i
UnifiedTextParser.js:76 ✅ Normalized text (first 300 chars): Käse in Horde: FB701: Symbolik IDB: 2N11_Käse
FB702: Symbolik IDB: 2N12_Käse
FB703: Symbolik IDB: 2N13_Käse
FB704: Symbolik IDB: 2N14_Käse
FB711: Symbolik IDB: 2N31_Käse
FB712: Symbolik IDB: 2N32_Käse
FB713: Symbolik IDB: 2N33_Käse
FB714: Symbolik IDB: 2N34_Käse
Daten schreiben in Horde Hordedaten i
enhancedWordParser.js:137 📊 Parse result for Hordedaten: Object
UnifiedTextParser.js:56 🔧 Starting normalization for source: word
UnifiedTextParser.js:57 📝 Original text (first 300 chars): Käse in Horde:
FB701: Symbolik IDB: 2N11_Käse
FB702: Symbolik IDB: 2N12_Käse
FB703: Symbolik IDB: 2N13_Käse
FB704: Symbolik IDB: 2N14_Käse
FB711: Symbolik IDB: 2N31_Käse
FB712: Symbolik IDB: 2N32_Käse
FB713: Symbolik IDB: 2N33_Käse
FB714: Symbolik IDB: 2N34_Käse
Daten schreiben in Horde	Hordedaten i
UnifiedTextParser.js:76 ✅ Normalized text (first 300 chars): Käse in Horde: FB701: Symbolik IDB: 2N11_Käse
FB702: Symbolik IDB: 2N12_Käse
FB703: Symbolik IDB: 2N13_Käse
FB704: Symbolik IDB: 2N14_Käse
FB711: Symbolik IDB: 2N31_Käse
FB712: Symbolik IDB: 2N32_Käse
FB713: Symbolik IDB: 2N33_Käse
FB714: Symbolik IDB: 2N34_Käse
Daten schreiben in Horde Hordedaten i
enhancedWordParser.js:283 📌 Found program: Handbedienung Horde 2N51 FB2100
enhancedWordParser.js:295 📁 Created program with path: [Salzbad 2.2: Horden 2N51/2N52/2N53] for "Handbedienung Horde 2N51"
enhancedWordParser.js:328 🗂️ Updated path level 1: "Handbedienung Horde 2N51" → [Salzbad 2.2: Horden 2N51/2N52/2N53 → Handbedienung Horde 2N51]
enhancedWordParser.js:314   ↳ IDB naam: Handbedienung Horde 2N51
enhancedWordParser.js:120 💾 Saving program: Handbedienung Horde 2N51
UnifiedTextParser.js:56 🔧 Starting normalization for source: word
UnifiedTextParser.js:57 📝 Original text (first 300 chars): Symbolik IDB: Handbedienung Horde 2N51
Freigabe Horde 2N51 nach oben =
[ 2LCP30-002-HS: Drucktaste Hebevorrichtung Horde 2N51 auf
+ 2LCP31-002-HS: Drucktaste Hebevorrichtung Horde 2N51 auf
Zeit (Einschaltverzögerung) ]
Zeit (Ausschaltverzögerung)
NICHT Störung: Hebevorrichtung Horde 2N51 zu hoch (2N
UnifiedTextParser.js:76 ✅ Normalized text (first 300 chars): Symbolik IDB: Handbedienung Horde 2N51
Freigabe Horde 2N51 nach oben = [ 2LCP30-002-HS: Drucktaste Hebevorrichtung Horde 2N51 auf
+ 2LCP31-002-HS: Drucktaste Hebevorrichtung Horde 2N51 auf
Zeit (Einschaltverzögerung) ]
Zeit (Ausschaltverzögerung)
NICHT Störung: Hebevorrichtung Horde 2N51 zu hoch (2N
enhancedWordParser.js:137 📊 Parse result for Handbedienung Horde 2N51: Object
UnifiedTextParser.js:56 🔧 Starting normalization for source: word
UnifiedTextParser.js:57 📝 Original text (first 300 chars): Symbolik IDB: Handbedienung Horde 2N51
Freigabe Horde 2N51 nach oben =
[ 2LCP30-002-HS: Drucktaste Hebevorrichtung Horde 2N51 auf
+ 2LCP31-002-HS: Drucktaste Hebevorrichtung Horde 2N51 auf
Zeit (Einschaltverzögerung) ]
Zeit (Ausschaltverzögerung)
NICHT Störung: Hebevorrichtung Horde 2N51 zu hoch (2N
UnifiedTextParser.js:76 ✅ Normalized text (first 300 chars): Symbolik IDB: Handbedienung Horde 2N51
Freigabe Horde 2N51 nach oben = [ 2LCP30-002-HS: Drucktaste Hebevorrichtung Horde 2N51 auf
+ 2LCP31-002-HS: Drucktaste Hebevorrichtung Horde 2N51 auf
Zeit (Einschaltverzögerung) ]
Zeit (Ausschaltverzögerung)
NICHT Störung: Hebevorrichtung Horde 2N51 zu hoch (2N
enhancedWordParser.js:343 🏗️ Building hierarchy with programs: 73
enhancedWordParser.js:345   📁 Program: Hauptprogramm Einfuhr, Path: [Einfuhr → Hauptprogramme]
enhancedWordParser.js:345   📁 Program: Selektionsprogramm Horde für Einfuhr, Path: [Einfuhr → Hauptprogramme → Hauptprogramm Einfuhr]
enhancedWordParser.js:345   📁 Program: Einfuhrwagen T10 nach Reinigungsposition, Path: [Einfuhr → Hauptprogramme → Selektionsprogramm Horde für Einfuhr]
enhancedWordParser.js:345   📁 Program: Reinigung Einfuhrwagen T10, Path: [Einfuhr → Hauptprogramme → Einfuhrwagen T10 nach Reinigungsposition]
enhancedWordParser.js:345   📁 Program: Kommunikation nach K5, Path: [Einfuhr → Hauptprogramme → Reinigung Einfuhrwagen T10]
enhancedWordParser.js:345   📁 Program: Käsezähler Anfang T10B, Path: [Einfuhr → Hauptprogramme → Kommunikation nach K5]
enhancedWordParser.js:345   📁 Program: Käsezähler Anfang T11B, Path: [Einfuhr → Hauptprogramme → Käsezähler Anfang T10B]
enhancedWordParser.js:345   📁 Program: Käsezähler Ende T10B, Path: [Einfuhr → Hauptprogramme → Käsezähler Anfang T11B]
enhancedWordParser.js:345   📁 Program: Käsezähler Ende T11B, Path: [Einfuhr → Hauptprogramme → Käsezähler Ende T10B]
enhancedWordParser.js:345   📁 Program: Sortentrennung N10, Path: [Einfuhr → Hauptprogramme → Käsezähler Ende T11B]
enhancedWordParser.js:345   📁 Program: Sortentrennung N11, Path: [Einfuhr → Hauptprogramme → Sortentrennung N10]
enhancedWordParser.js:345   📁 Program: Füllen Horde Reihe für Reihe, Path: [Einfuhr → Hauptprogramme → Sortentrennung N11]
enhancedWordParser.js:345   📁 Program: N10: Blockierung Einfuhrrinne, Path: [Einfuhr → Maschineteile Einfuhr]
enhancedWordParser.js:345   📁 Program: N11: Blockierung Einfuhrrinne, Path: [Einfuhr → Maschineteile Einfuhr → N10: Blockierung Einfuhrrinne]
enhancedWordParser.js:345   📁 Program: T10: Füllen Horde, Path: [Einfuhr → Maschineteile Einfuhr → N11: Blockierung Einfuhrrinne]
enhancedWordParser.js:345   📁 Program: T11: Füllen Horde, Path: [Einfuhr → Maschineteile Einfuhr → T10: Füllen Horde ]
enhancedWordParser.js:345   📁 Program: T10: Positionieren Einfuhrwagen, Path: [Einfuhr → Maschineteile Einfuhr → T11: Füllen Horde ]
enhancedWordParser.js:345   📁 Program: T10: Transport MT10D Einfuhrwagen, Path: [Einfuhr → Maschineteile Einfuhr → T10: Positionieren Einfuhrwagen ]
enhancedWordParser.js:345   📁 Program: T10: Transportbahn T10A, Path: [Einfuhr → Maschineteile Einfuhr → T10: Transport MT10D Einfuhrwagen ]
enhancedWordParser.js:345   📁 Program: T10: Transportbahn T11A, Path: [Einfuhr → Maschineteile Einfuhr → T10: Transportbahn T10A]
enhancedWordParser.js:345   📁 Program: T10: Transportbahn Käse Anfuhr T10B, Path: [Einfuhr → Maschineteile Einfuhr → T10: Transportbahn T11A]
enhancedWordParser.js:345   📁 Program: T10: Transportbahn Käse Anfuhr T11B, Path: [Einfuhr → Maschineteile Einfuhr → T10: Transportbahn Käse Anfuhr T10B]
enhancedWordParser.js:345   📁 Program: T10: Transportbahn Käse Abfuhr T10B, Path: [Einfuhr → Maschineteile Einfuhr → T10: Transportbahn Käse Anfuhr T11B]
enhancedWordParser.js:345   📁 Program: T10: Transportbahn Käse Abfuhr T11B, Path: [Einfuhr → Maschineteile Einfuhr → T10: Transportbahn Käse Abfuhr T10B]
enhancedWordParser.js:345   📁 Program: T10: Transportbahn positionieren T10C, Path: [Einfuhr → Maschineteile Einfuhr → T10: Transportbahn Käse Abfuhr T11B]
enhancedWordParser.js:345   📁 Program: T10: Transportbahn positionieren T11C, Path: [Einfuhr → Maschineteile Einfuhr → T10: Transportbahn positionieren T10C]
enhancedWordParser.js:345   📁 Program: Strömung Einfuhrrinne N10/N11, Path: [Einfuhr → Niveauregelung und Strömung]
enhancedWordParser.js:345   📁 Program: Hauptprogramm Ausfuhr, Path: [Ausfuhr → Hauptprogramme]
enhancedWordParser.js:345   📁 Program: Selektionsprogramm Horden für Ausfuhr, Path: [Ausfuhr → Hauptprogramme → Hauptprogramm Ausfuhr]
enhancedWordParser.js:345   📁 Program: Horden Ausfuhrtabelle füllen/entleeren, Path: [Ausfuhr → Hauptprogramme → Selektionsprogramm Horden für Ausfuhr]
enhancedWordParser.js:345   📁 Program: Ausfuhrwagen T40 von Bad nach Reinigungsposition, Path: [Ausfuhr → Hauptprogramme → Horden Ausfuhrtabelle füllen/entleeren]
enhancedWordParser.js:345   📁 Program: Reinigung Ausfuhrwagen T40, Path: [Ausfuhr → Hauptprogramme → Reserviert]
enhancedWordParser.js:345   📁 Program: Käsezähler T40A, Path: [Ausfuhr → Hauptprogramme → Reinigung Ausfuhrwagen T40]
enhancedWordParser.js:345   📁 Program: T40: Entleeren Horde Reihe für Reihe, Path: [Ausfuhr → Maschineteile Ausfuhr]
enhancedWordParser.js:345   📁 Program: T40: Positionieren Haken T40, Path: [Ausfuhr → Maschineteile Ausfuhr → T40: Entleeren Horde Reihe für Reihe]
enhancedWordParser.js:345   📁 Program: T40: Positionieren Ausfuhrwagen, Path: [Ausfuhr → Maschineteile Ausfuhr → T40: Positionieren Haken T40]
enhancedWordParser.js:345   📁 Program: T40: Transport MT40D Ausfuhrwagen, Path: [Ausfuhr → Maschineteile Ausfuhr → T40: Positionieren Ausfuhrwagen]
enhancedWordParser.js:345   📁 Program: T40: Transportbahn T40A, Path: [Ausfuhr → Maschineteile Ausfuhr → T40: Transport MT40D Ausfuhrwagen]
enhancedWordParser.js:345   📁 Program: T40: Transportbahn T40B, Path: [Ausfuhr → Maschineteile Ausfuhr → T40: Transportbahn T40A]
enhancedWordParser.js:345   📁 Program: Strömung Ausfuhrrinne N40, Path: [Ausfuhr → Niveauregelung und Strömung]
enhancedWordParser.js:345   📁 Program: N21 Füllen Horde, Path: [Einfuhrhorden N21-N24 → Hauptprogramme]
enhancedWordParser.js:345   📁 Program: N22 Füllen Horde, Path: [Einfuhrhorden N21-N24 → Hauptprogramme → N21 Füllen Horde]
enhancedWordParser.js:345   📁 Program: N23 Füllen Horde, Path: [Einfuhrhorden N21-N24 → Hauptprogramme → N22 Füllen Horde]
enhancedWordParser.js:345   📁 Program: N24 Füllen Horde, Path: [Einfuhrhorden N21-N24 → Hauptprogramme → N23 Füllen Horde]
enhancedWordParser.js:345   📁 Program: N21: Umschwimmen Horde nach N31, Path: [Einfuhrhorden N21-N24 → Hauptprogramme → N24 Füllen Horde]
enhancedWordParser.js:345   📁 Program: N22: Umschwimmen Horde nach N32, Path: [Einfuhrhorden N21-N24 → Hauptprogramme → N21: Umschwimmen Horde nach N31]
enhancedWordParser.js:345   📁 Program: N23: Umschwimmen Horde nach N33, Path: [Einfuhrhorden N21-N24 → Hauptprogramme → N22: Umschwimmen Horde nach N32]
enhancedWordParser.js:345   📁 Program: N24: Umschwimmen Horde nach N34, Path: [Einfuhrhorden N21-N24 → Hauptprogramme → N23: Umschwimmen Horde nach N33]
enhancedWordParser.js:345   📁 Program: Ausschalten Horde, Path: [Einfuhrhorden N21-N24 → Hauptprogramme → N24: Umschwimmen Horde nach N34]
enhancedWordParser.js:345   📁 Program: Horde N21 Heben/Senken, Path: [Einfuhrhorden N21-N24 → Maschineteile]
enhancedWordParser.js:345   📁 Program: Horde N22 Heben/Senken, Path: [Einfuhrhorden N21-N24 → Maschineteile → Horde N21 Heben/Senken]
enhancedWordParser.js:345   📁 Program: Horde N23 Heben/Senken, Path: [Einfuhrhorden N21-N24 → Maschineteile → Horde N22 Heben/Senken]
enhancedWordParser.js:345   📁 Program: Horde N24 Heben/Senken, Path: [Einfuhrhorden N21-N24 → Maschineteile → Horde N23 Heben/Senken]
enhancedWordParser.js:345   📁 Program: Laserkontrolle Horde N21-N24, Path: [Einfuhrhorden N21-N24 → Maschineteile → Horde N24 Heben/Senken]
enhancedWordParser.js:345   📁 Program: Strömungsjets N21-N24-300, Path: [Einfuhrhorden N21-N24 → Strömung]
enhancedWordParser.js:345   📁 Program: Strömungspumpe P03, Path: [Einfuhrhorden N21-N24 → Strömung → Strömungsjets N21-N24-300]
enhancedWordParser.js:345   📁 Program: Entleeren Horde N31, Path: [AusfuhrHorden N31-N34 → Hauptprogramme]
enhancedWordParser.js:345   📁 Program: Entleeren Horde N32, Path: [AusfuhrHorden N31-N34 → Hauptprogramme → Entleeren Horde N31]
enhancedWordParser.js:345   📁 Program: Entleeren Horde N33, Path: [AusfuhrHorden N31-N34 → Hauptprogramme → Entleeren Horde N32]
enhancedWordParser.js:345   📁 Program: Entleeren Horde N34, Path: [AusfuhrHorden N31-N34 → Hauptprogramme → Entleeren Horde N33]
enhancedWordParser.js:345   📁 Program: Horde N31 Heben/Senken, Path: [AusfuhrHorden N31-N34 → Maschineteile]
enhancedWordParser.js:345   📁 Program: Horde N32 Heben/Senken, Path: [AusfuhrHorden N31-N34 → Maschineteile → Horde N31 Heben/Senken]
enhancedWordParser.js:345   📁 Program: Horde N33 Heben/Senken, Path: [AusfuhrHorden N31-N34 → Maschineteile → Horde N32 Heben/Senken]
enhancedWordParser.js:345   📁 Program: Horde N34 Heben/Senken, Path: [AusfuhrHorden N31-N34 → Maschineteile → Horde N33 Heben/Senken]
enhancedWordParser.js:345   📁 Program: Strömungsjets 2N11-2N14-101, Path: [AusfuhrHorden N31-N34 → Strömung]
enhancedWordParser.js:345   📁 Program: Strömungspumpe P04, Path: [AusfuhrHorden N31-N34 → Strömung → Strömungsjets 2N11-2N14-101]
enhancedWordParser.js:345   📁 Program: Strömung Salzbad N20, Path: [Salzbad N20]
enhancedWordParser.js:345   📁 Program: Entleeren Salzbad/Füllen Puffertank, Path: [Salzbad N20 → Strömung Salzbad N20]
enhancedWordParser.js:345   📁 Program: Datenübertragung mit K5, Path: [Chargedaten]
enhancedWordParser.js:345   📁 Program: Chargedaten N10, Path: [Chargedaten → Datenübertragung mit K5]
enhancedWordParser.js:345   📁 Program: Käserezept, Path: [Chargedaten]
enhancedWordParser.js:345   📁 Program: Hordedaten, Path: [Käserezept]
enhancedWordParser.js:345   📁 Program: Handbedienung Horde 2N51, Path: [Salzbad 2.2: Horden 2N51/2N52/2N53]
enhancedWordParser.js:350 🏗️ Built hierarchy: Object
enhancedWordParser.js:362 ✅ Word parsing complete: Object
